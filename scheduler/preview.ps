%!PS-Adobe-2.0
%%Creator: dvips(k) 5.999 Copyright 2019 Radical Eye Software
%%Title: preview.dvi
%%CreationDate: Thu Mar 26 12:54:54 2020
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: NimbusSanL-Regu CMMI10 CMR7 CMR10 CMITT10 CMTT10
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips preview.dvi -f
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2020.03.26:1354
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 872 2018-12-21 20:39:31Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup xGridOffset add y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMTT10
%!PS-AdobeFont-1.0: CMTT10 003.002
%%Title: CMTT10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTT10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTT10 known{/CMTT10 findfont dup/UniqueID known{dup
/UniqueID get 5000832 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTT10 def
/FontBBox {-4 -233 537 696 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTT10.) readonly def
/FullName (CMTT10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 33 /exclam put
dup 40 /parenleft put
dup 41 /parenright put
dup 42 /asterisk put
dup 44 /comma put
dup 45 /hyphen put
dup 49 /one put
dup 59 /semicolon put
dup 60 /less put
dup 61 /equal put
dup 62 /greater put
dup 76 /L put
dup 78 /N put
dup 85 /U put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 123 /braceleft put
dup 125 /braceright put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794DDF2E5ECEBA191DB82B3
7A69521B0C4D40495B5D9CE7A3AF33D17EE69979B82B715BAD8A5904C5DE0260
6C15950CCF6E188A0CDF841EB68E5A2F88253E382140F87C87E55C9EA93B8C89
14A36CDF630D6BE7CD36DBDCE22B21778E8648B97B7EC6742EB5114BDF0454B0
0EA7B1FE236C84C0E5308C871F67B973892890557AA12E00B2C20C71F516C397
3F3BBD14A1D0149CA064391056E45E9470FC7F6F556ABC82653B3C8049AB5CF4
BA83C8F2158C236B2FFD4208846013BAF4165E8BB8D334C8FF2E8D74AF5DAB2F
D44788869B08399421AAA900ECC6A2D594641C121660D4B5F512938994C18DD0
FCD9B008F68F0351D21ED735B2740CB1E0C1CCD25EB548C35B844601D98828DB
556F71D07E081A593FF12DAF83676492A0FFE16E95717A07082B43A966C1EE8F
8A59E1255E1705C43A23CF29A5E4A6547C93F1680A870EE7BAD8CF74D838CD5E
F806911D8FE4262ED8E7F5BC58B92C9C6D74F8AD45FBB021EC7E97393018B9DB
B1B84E7B243ADB05ADD3F1DB3692ADC5D47FEC7DF93080669E63281F1576B673
125EDF08016664BE73364F65389F7C3B66623AD1754ECBEF9E5CE6948D933787
A5674279ACB2EBECD3B4E6361419AB32028A27670C9F3E18B746A10B00AF6D77
4EC00E3BE521C02A99AE5BAA98F793EB1228952BE67934B91472E01AF7B816BC
56D7F19F631A1927846D800C107B1E9CBFF9D2DD513B4A8CE2E0DFD77B1ED178
E43FA7052765E9FAF89989D490D8FEF6C536EC0D4AE27A74F474B98DA9E6B92F
15E063DB260571979A5DE2423920CE1F59F56EB11E00E3BB9D466A8263E1E385
2014BEFDA8D1EA3EDA04BE32AEE6CD15C5C010A1DF7F705A2C0C18E87C8DCCE9
05D9163181CBA56C0FAC8C06A2990554C8E759D076B01BBEADE3B5FB8B551390
6C8E4A2A1C6E7D9C708614626F3770C0AB7DD2027469C77975C27576065862AD
04E5E50CEBE907E3E991FA0C627302C0E207B4D5992BEBAB5853AD1C0D271728
C76F40A79392ACCA7358F948AC65DC823CFDA59E1FF69CEBB6B7EC3CF21669E4
70D999508F9C49E2D9F8818CA53C977D93E15FBBBAF75B1E84F0BA62BCC4BAFA
4EEC82D804C8A8C0210F3E5E258BB1F6921AF02BA9861BAD5C3D5FC8CEFABA8A
A607E547B802096F7AEB09FBA99C83C9A494B94408DD607CA6561A6E6660C473
62CF8D35F31D052F6C6C8138A8E1430CBA7EA6973D6D510C1A06B3FBD79D9364
240C1A00272DA44B89A9FE8D5BF36DC1B5EBB4A78ADBE9C5EDB485F093D9517D
69E1AC9A8E6C9D7C324E3797CFEAD9A18E82E03F69B2CED7D5DDCD1A218BF2E2
ED2293AE999FE2A4B5213A10083EE0407BCF8007670B8C737EAB30311C868D84
121149ACB4A27F3ED6C0C181C98AAAF51B105F264B5672D7F745131ABAB5BEA4
0C9B43C0DD9116D6DC61F90BE72018F290D26D5E9D341055CAF09C9F45333CDB
D45B7954271767F638EEC499F7B53C2CC5774EA7A7F024C4CABFB93D9CB1856A
0C671A4ECA7C62EA5242648A84E7F3AFB9547A0AFC29593CFCE6D8B873A78157
D337CABD291431C0A2CE1F37E0CD7340567AC206FF98E4B5A6410F70F750451C
550EFB54AA259A1B236CA9CB730D2CEF125EC65D959441F7CC9768F777B44844
CC9842A307C72B740680ACBBF6AA35FA7A94825069BF7696ED81A371A9E5475A
9D997F2DFAD339AADF797F7E03E654234455AC3D17702A420EE0A597BA31BDE4
FEB8DBA7C61D311CC90441A620164DC22DC2D373973EF84CC553453AB1B3337F
7B39983B8DFFB3A9425F119B45C1CD37A76F905777B3154CA6200792F1759D06
E017890F4041A385F2238E3C48B6C8EE6F5258463FDBFF7AC762F6C4363926D6
50F004D473B7B7F73CA686B559C2885F1AA761653C727A77D73431E9D110E76A
2E55C68CD50F43997C9B2FC4710F8C8540909829E215678E63BB8363C4B8AF05
9986102BB36580D9CA95CD216B7C321822CB41B2E0422CD077F3B55E0246FDB2
44D5976F67296B5B0BE4B06F6E43535C21164E6C5089C3E9BA2D6B30888C57DE
49DC8D9D46C0D5EDC47ACF2C03B72DE3B69512508539019B759280BABEA12BC9
385308A0395C4CD33182A10A5A229743379C2075D82D8BFCE4A66E1AA087A091
8F5372684FA5037D1B92D50CD9CB4F50AD4F8EE7D51F1C9E63C721CB5B9BD011
6F0A8DD4FDCD2B008F223A1036D90F0F3B252487DE7898F9AFBB3A9D9CD49E0C
EF4ADAD5155A98D2125ED5A3D3907F67301649519419F33CD942E8DDEAC1BDA0
E90C431B198F646766A8FA9F8D1561B57E126EF604838C0C1966655CF31FB7EB
C8CCC434FC1C96046D38203E1791EC824A3D7AED85C029288D4608CA7668A2BE
484C99639F121845B22EEFCE0A3B808261921AA042AE19E641769E91277BEC29
4594082CCB3058F90FAC4A700A8A827ACA00FCF574ABC8EB7DBCECD97F2B22C0
0AA19E8739B81AF8C6F621D69B8E6F29BAE233FBA655A0AF5BDFD7F5C6B9167C
6BC7AB693D45EF2AD999F5DA3CEFA39BA48A17EE6D9F2C4DAB91AE3F0044DC3F
5D5506CE4675AA928B0092D6F173644F91295216D8BBB14CDDE0AD524A4D545C
1B5E284A3BF0396664081CFB4F186A84A0D24D61E82F4767C1E55A0642720CF3
909FA1AB8EAB78030B59BEA067DEDBD2F1D0340E790AB2777DB18248521934A8
BB38A58B7F633DEA4291B0D5D13E9A882C974697CC6D3B49E030C94EA29B5506
CC29C44D01B4751B453A46A9F6BF3BF135AE87A4CE232AF57B66578310DE41E0
2A6AC422117F1963C4D7CC306BD25A6E724E51921779F22F029733122E23E2F0
CB340008813ABB104380C80A492B3FC6D0BB07CB8D8409E9576891EF6E5C9D08
EB8320DFA31BAFFBD336D0C2BBC3D3B2D30368B9860768FC080D30569C7F7811
0EBEDA2962476113625EEB555490B8CE4C5F99D74ED10F738C61854CFF8B41C6
9402E56BE8856144A1A05D0B05F4CB7EF728B2F4F5A439F18C3B68CEFA41E59A
D8308ADC92EC1289DC84CF48D2CDEFF509A145BF945E1E00D552D329EBD2A7C4
21D58082CC8FA790E981F4AC8EAB99950678FD3A7DA3DF13778681B208DD71A0
7C3CBD0664B37C9EDC6B601D79A2C51FB54DAEE849F93209793849104E722D3F
52DFAF7047EEEDDFE744787A5801E4AC2C3D58EC5DDC15FCEE03990C53B0C57A
FC54F125A04C8E4A0ADAA725808C587E7DAFB9F784FA2875689979D316DC22BD
AA36B306A1ABCF907B63C6476737B746099973CAEA8C1E2C5C41F27E0F7DE8D7
F0D942E34E92F43FE902653D4D2EBB6F3B9F7928B1550A82AF234D45D028F429
067652BD3D391BF423AE72B9CB1E8D91E898161BE3A7849D456A861A2046711E
E934DC59442AE7D81661CE8EF727D8D7DDC0270E937E40F896AEAE6171661431
C1025C53172F9D366834BA0054FBFD84503FBAE328B6FDEA180F8EA35B1DA937
5CC3B8F00C206908C2FFFFA6A7AC6915D15EA44BDCF29E2BFCFD4A849535F19B
0D307C696BE8205C7D84B9C77F02EF27D911056EDBB4080E4D3ED72788666CAD
CD91B0ECE27A177DB23320A7FA9C31408B4D02D2A4B1CC6DDE1A6CAC3D8EC1EC
2226EC98E51046D1EC26FA20EE62D24747D83CF4941DCE5CCEEC0DBE387149CD
E05B19FFCAFC0D117F9A3E60DCD4C815228D98EF95EB559AD0ACC0D50FFDF714
56C3C812EA5ADBB013BBD956A7C4CC0ED7D3E25D5C9AF5E626F18297F75D4957
F5B0B33379114B903FE98BCF35C3FF76FEE1D9AEB711F2962276531F7380EE3F
E368720E0292A170A15C5539B1FC7BB954EE2624B504CB8C805B8D31AC38307F
0513606F09211AE64DAC447693B2A0AD15E9A64C34F5A911ECD0ABCA90E9791D
67C6BD202B0858EF96E7722305B8AC02B01AB1706CC6AE875A8DDD15EE349046
EAA65005E7866B506EDFB7A5A2AFD5C9E9DCC821A79EE9C1EA2C7BBA32A40BC7
CEC26DB1AC473C8C3960ACEC581B37D6569E8C8C42950BAB7930B65E1570E3F8
9A7FA719F1DCFDA45A3BF2AAB32C9A93BA3552608A61C623DE59BCB346E87EF5
9CF025A87803161221C5C1C6F6B3403712C76E9D755C7BD68D7F2DC03C14CDF0
C1BBED1D648B905B4B17037B7263C1EA7A7F06FAAC4E09E08483A8D714C19861
327CD9C32DDF850302DD6DDE24912D00C22ECDF3CDFB18FA831A41A7488EC203
F564CFE30D506F0829A96D35A7E09C3DCD107D589B627A15B55C5D6649126BEC
60B88C55ECCBB4E680265D9EAB4CE22965D3B1AF759B01ACB0D0E6C92B6B4EFD
A81E6A648708979487FC591CF09631310D46891423F4EC159A73E30D8DD147A4
B0EACF6D45D18CD16CEB8176F03ABCB41F2234747B9733C8FAF34AE5D43D3BA5
0CE0FACFC9B087F84FB6C68678BC6E76022B1526D6E5B3A48EC1A110BD75F45F
1C4DC6D39F254976453F57DF873B7D635C80C42026DE020E5BAFE0DA0D54D1E1
DC634D2621BA184347E5252F645A6A1DB7657C48124186F0E4C644077457C24D
55753C651A9A7B6349867641464B515B821349C795A645420508673B93750D0C
7A3B33EB1F09782033742AE8F3A23FC02284E6C03818FADD1731361542E3FA3E
75B8D52B668C3E18A4AE967D0FC3157083D952AFB8144D549E69EAAC51C279C5
E5D88A0D9D53013DFFB4352A1598FF84DCDE6FA32FC377306B9B92C0F96EE149
8CD55E7B2445B86CCA7A547FA732D52D59025129FD8C6333AC0DF4F0CFF6287E
F2036D5DBBB3B91B92F12FEBE0B61A313A4DB5A9CF0BB3DDB781A56FEBFFACCB
8CB9D1D3DBDBC4CB6AAE6769E470582403CB920630221B68BCB625CD4605FA8F
D3D5B7A1A28D15E44B38E92E906C138E72C15B86F64C38E23BF0440052A8C914
54397F49DBED99D0AF7CEA3B0A05FF37C2D7EAE1412567E6776333237C31E3C0
49949EC8BFD6E0F6446CE2D4DCD2C1524A288818CC5D159BF8463A847AE4A2B9
CC8C58F822804B81B13BF4F2DEB6229C4F51F093075581791D02C36A13B855A0
34900AA7CD4F1A797652656FE3A8425A38F421C4CC0ACA1CDD44FA6B31219276
1CDE1CD63D6A58CE705CB56CCA1260F9B86E989019071563A9B4C274A87558CA
6EF1660D574EDA276801F0057740E2C3B80D253D697736484D892CE1AB128B8A
DECD69712F5E70E895FBAA927E8194D792A04AB6CE205E04E38A433BBB793FB4
E8BBC4279D58A223C6673D909D6AFECD246E66A52F4CB35E5931D24C828489BD
4ECAF621A220D8ECF702BEB01C4FC7510197D3F6D15321EC87175ADBA6434ECD
2B5A306E91375CAD22CD94301763E4A8B981472890422C5488FCD523C9CB17DC
ED22FBF12D5F7525D0D6BCFE8CE85B0DFB1D6F989C267FFBA0A996D309E4A934
3DB54A9D29C88B9D55D7300DA3D46419256C5A07A2A529A8DE8BD1727281F5FE
97033D861E0531B14E811378EC1AF1CC7EE9BA2B07D935843D3053F673979F8C
FAFD59D555B56CE338F606747238B22BD62C42BB7238FEA335678D474A643570
A9E7B4970E8C541CE9DBC7BF70ED7BA33639D6744A18379455029E934C95E2EF
639C4848CE9A0879B51649FAB023A71782444B451F92A34CB8A124270CCF86D4
D18EEF5C1D2B2A29012613851C49F50702D63BACF95EE2AB4D72B375E0A62615
E0991E130A67ECBA9E05329B740708F1CB148724C3A6E5E3AEC1F88EBCA398D2
1CA8827C977D72734310233176D1AE26C55CF2CEACA62223315C28FCF6305C7E
A22414D4739A059F552F1F9372CCCA5FED4F9AC987942848EB498900269511F3
F408CBEA0659B954F5F1B18AE4FB270213646F9B28AE4439D2BA2D3E0AAAA780
5E530E4EFC8A060EB979E12191044509DA0C14397AFF949E12DC970658D5EAF5
4EA963F5BC1407A32F3837CA6A24B7F3D60EB8E6222B702E25ED903F9D21AE50
664A095009BDEAF4B78DAF94E5A55D48366CABF07791A1684B2F54EA69070844
4F031AF8DF416C2D3679F8BA038B0DC9DD0400CA6B34667BCBBC07E62C1668A8
35A8C57C9048A7227E672E89681B54D662079A189A9E96A3CA96D8DD10189B04
1DA49BA2729F1CA585B1BD5C467295285D52E47CA904235A1A3E48EFAE9EB6F6
01374125CE89D53C276858668CF45D2F092DDCAA52418E0BB94C2B8266B4D88A
5D911507BB1DDA3D8F6E7C14A91CA11AE799EC42E993098E18CADA70BD2A1D82
2C39326C6E3F9E84CD9758B9AE43D79BF99E6A0CD713E95B3D9B7DB90D127DE0
DAFEBF850CAAACBD860B5DEF2082F1ADA64B44B193C4A1417BE221FDCA36456C
BE5934C8CE3ED55AE3A11697C2D682B7D0F72D48976451D205783BE25DBD2507
39C14FFB4BB828DFD187104F38A7F11D5F0698C11E8C1D4F107CACE573FDC4B1
C56FDAE47024D6FD16A2FEABB434CA320300FC4B6C1B6CA08F76C60B7C08A665
99F404DBA8A2A1EB18EF6750E4EC186E31561A3F080BA6562967546715859481
7BA782940F5C5D06626D6F6A412CA7C13820EC7C1DF23E15E5829F698CF617BE
D940523E4EE4ADECEC48C24297DBAD528BA1DCE7AC335A1D15D55415B108EFC8
6D45030D27B3EA63B2B4CD771DBE66AE0218ABB1153D4B7482289D1313CEF184
5C960B1E3C3C953912CC6F4521D1E15636C1545EEE457EFB87B88C9E43CC2F38
6BC4BC96969F4FF28ABB06F4454C01CEF1B6DC538F1E832FC1666D977E5A881B
F72F1B4C7DD4BE167A5535F1163A0706F9A0B26400178DF8A128FB5EBE6A7B81
E478AD183EC06622B591337B9F1872AAEA356F4FC67EE767B34CB5A4D90702D9
39FB846947F4096FB3DCF16EC81455164783BA0B5D723060DAFF411B68307E81
7BEA1D9A47A5AA3D648E618C83C60F060029E6EC4D46B045FA7415BAB2AD0AA5
ED9C729C24136F6AF61E6409C0B5CA760B16225641E268A68CFB8260BBEAFC77
6626EBD97195E77CAB425CFB0096D805D9EE699E41680D095AE9FA10122A7882
2F00F495C9EB2102DF0D3E61833BC0A2E468C5CF7AB430FDB7C0BE3DF2C0D230
1580BAA25D65F599378D873165482A1FBB224AEA89C6BCCFBDBA42AE1C5DCF41
06969F585CD3B737D1388D6359F5468D88FCD2279BDB270F6A858FB7D2ABDEFE
5EE8FB79FA437F8F50237B92C307B73B0DCB808D07A9C3255CB9B3B17039CE5A
288103D05D132863FB522A02CEE3839EF9AF7F07D99732F0B8B384745369FB3E
7901166478F4A16076A1504C5E98D17408494E270BBF4470ED12B4332422679F
759F1D93984D7E506D16950DB6C2682FE1379EFFA6F6C95DD71F6E55BE3EF6AF
E0CB25388EEB436E6527806FC75484133F6E561DEB979D5C1FFEFDAF2A6D964E
03BAE0BD593C2992AD84569C81050F7A793C5263E50C2F50B98C4CC703EAE17A
6AEDAACE312DAFAF5278D125B6EFC5587484F61DAFF46B87B7C9B1EEDECA4859
314A9A9E2248467DE1E54D90DD671660B9040B3E0DD982260822177EFD757266
74A16C83A7FB168016A320D3DF3BD7726F1F4EC90EE5DFE810C96B099FD4368D
906AE4699049EFD37E8EF058D4B97BF71106445AADD4FC6E90615A0066823A36
673B8DE32322BBE861AE251226B4385AB28702831270DBD25D666FBB0AD7B96E
A44E891EA1EAF0F87013AFC982E33D67A28E96E0C9CB99B9E4192536830D9901
931A8CAFA41289633B20BA3BD7AA3414B6DA8D57CCF2FBE39920CC06361F075B
CC40335DB9A0071CFF77F6B7BB47F3100DBDC9C4A58C2B81EC99E8E966AF3390
E3FBCC28BA1D79961C8A1584266454DF772FBA99664D74D4A89FC82FFEDFCFE1
4C9E4A04291E803D142E37E7ACA66AB279378F2F192FFB2B5BBAD18B95F03136
2CB594A3D6D3F8576B90A6C4DAD6D6C8EE07AF682F925F01D0B26CBA347C03BE
F3B0585CF4539FDC66915E22117078CC94D621F31DCB3E021998A5D6EE94CA4B
E214D07517283D56973D8E4367392BF6C1150DEBF459D141AE0941C1C8C5CFBE
E735D796E365A1B0F60BB4CF2801EAFE4889EE5F338D3C4885368281B3C95CCE
251C28A90D318A8A0384439B38D63B94757252062EA44E88509FDD2E75FAAB71
7329622828B2785C1A8B26351BC7448C1719C88FE99BCB73F7DEA427FBFCDF4F
00EE079B0C712F7D2C8DF98D4830A9D8C8B70A8C5D54BC1DF3171135278BED55
DA1CF0E696B12935EB59B606AA3ABD3C4AF64523F37F17811F2FDF3C3613D391
4135AF68EE5BC68A94B7FCBCA3E246145710C4509F2756BEC93C6432DDB7D1FB
1AC28B04BF3DAC8FDD209C70847101F4BF1029876A80A6E4AD20BDCE4BF93543
5AAD174889D7FB8BC7A1AEE0A56BE8085D76D15EB463666E0801179C2EC212D7
741D517DCE40C6943373DB96EF2F43BDCC5E16E77D307E529304D0A9DA233B0D
1292834EB82DD7F31B8E86D61A549F0DAEE590CFDE3C61BAA5CD9AB607650FF8
2F11DF2BA370DDD6723C154C900D18BF12EFAAB723A7C816D47A9B3FDFA93E8C
92F73730E1E28EC8FB46BBC06BFFE286C366E1F387AE1ADE40ABD7DABA77FF81
8154A0B50ECB2AEEA335B5BDE39407AFE277481B78B1DAFE794126057DBD2C46
2F67311F130DEA693AD05F6FCAAE4BFC1F60C355698E3563A7418A0DB9EEFAF6
FB97D69C853D4C55B38EA26A28CE39121BACA6DCEABF725FB229FAC5B047E725
0423FD059DF62DC7F894F5B80DCB55C87C2511B2686D60BFA1B6C9190E80C659
E171B0BEE4CF107F0A4307D118828912D14C9792317664F110F3E6A68654E169
5F8958AE4D69E5076CE4300137B95B0BAF9F641AD4C1079E68EC0040E30B3155
23867EF5E542E38B64D473A4A2410CE61ADACDCE2CA7DDEED0BEC5838B583319
78769574D066CF54ED5E3235C07DF3526C66DCEE4952A6ABDFAB54788F786ED0
3DBD1FCF0F4808BBC4AEA4881748C0A2F1F9A03CCD801AE59A4878ED27E515FE
D0D26FEEE69602B2BD58D1451688884D5B37EDC8DEF2EACD9C3985BA9ACAC69E
E0EFCCB514DA6DE060318DA4875AA4D5D876DC1E45FDD2E51854B1DF79823A50
0DFAC8646CB7E1197EE9C8C55E2DE98C333AC729A8D8C745368FDF6B92371FB1
7C3C2B00CD775166E8C3A1BC13FB31B0EF2B5DB1D3284DF1A081B8EA09254B0A
6876B9EE7AA5BB254D4D0C961CCAF6533D46E6E0FC453B90FEA4A45F65E218E8
92C350FCADB5F66EB82D0813EF551EF70AB9A5B0901EC307EDBFF4A6CD8CC2FA
66CAC34B1160755E921387A78C1E733A92489B96E85915C4BC2777D66FD763CA
F66C1A830E482FE86137C7DE758263550522545CFE3285AFED56D3F78C051596
29211C2246F9A36A77A4147813A5689E2FBF58CF0D4791F57E7D64B43EAF4ACB
ACB8C46C1D8128B7C63874B0F79D4638B1DFC8B71413DFA9A0D96199A59D9C57
DE0C572DF7A0CB7D99A9EE1F6F67A0D65DC578C6B7DDD7A05E16C0FFDC101075
10E4958BE5BD166428546ACE88DF1BF21C09F61DFF28ED566434637DCCE4848D
2B8589FDC017A2FD7D40E4FA3D1F7A6D6FF2864E4811F7AB3C05FFD1CF7D47CA
1EA003CAAC244ED8B5C683FA9637C92FD47DB3D83003B4A5F808BDAA369907D0
0FB1C80227D9B633FD5C536A261B9CC6A56073F887467B15C17D2D0C33C824A5
07CB2FB6E384BA8BA81D69154416411F33D451D4E8CB276566790B7D4C02461A
BB08BC88FDED68C271C33EDB0C544D1DDCC6D93DA6696E337699AEB3F04D45A7
E0A337B8A0DC77A58136E06C123AF2876A1DE2884E34EFE039EEECAEF59CA261
835523699584D4B02EBF76CA733C4D615ECFAF125E5940927893B642606A988F
A48884514D67ED7EDB6B5B921A20D8002222FC3FF8B4D2A399CF7E02D0B0287D
3AFBED84C857186645C4671CFA3BBE6CF38BFAB8FD28AB1B3E4249D780626F55
D7620C2C1C392496E8F1D97A91F1ED536615B356B4F01A98944DF885C7709F2F
1BBBA6663E81CE344120AEC80007E83F0B4A9442654C6D3C0A9701408E610F25
18ABCA672411D6304269E703324E2127A46E9DBFB644854B0BAA2290B2082F99
E0C425C27725D3769CC52F0F7F2E3C2D7E60AFDF729A535E0517F42FD746594B
F4D608E3C4E410969D1D2525EBCA75BF25E9E61E20DF91D076228D1486B5323C
BB89ACD0FE5A2F65873466B393A14CE8BE9231FE5DEC29E8EE166334B9919AD6
EC81195F6966650B00DCAF38B84925B98DB3B571A650A81DE855DC670726B4A2
98F819F4B19EBD285401BFF9879441A81CA5B1FA295BD072D41E87CC9348AC5D
BAAAF85F128280E2DFA027357FF78D906699CB9C2B43FD2042ABADEB88DDE334
8C863EDE31E97ADF14D9F180343DA29EB6D494C87964357C51A8FF392A8222E8
4E26694CE800BC4BE82147222D78B4F1BE9BC06735FD20406E7E21859EB8CA1B
3B5CC5A80C5C7238AB889F4EC64CFE8E9E8003EC8389FA0F1E21A43BD672D532
D8E4FF37AE1C54E0BD1B49F2804A71CA26487E8B2455D446E9BAA4CD9D55077B
107D8180396BA6046AB3DD2D6A67F05C3FD7CF64D8F619AE619F5CF7C0BE58D1
E914FF9ADD9B3C8745E15C012902696AFD064DC935EA0D780A1DD8CE08BC9C61
0007C588ECCDB1150C3A0F6223F9B3C3812CE3CC9327C62C1093B30D44F25A29
80872F4C61B829F82F3A7C84998BC7883F84C17A155698F8DB87446B36317366
00F565F221D015302FDBE910568A03C3AE3FFB848E6E28596C0766074E79F425
E11FA28FBE02C48FC71CADDE41E230C4C3183ED43E8BE69DCB1346EF3F5D3820
2A50A8BFE1036057800F4D1F582C755BA28FE217BB6F0BC305BD5820C991B9DB
076A453F13C3EF8A3CF5955643648325839A182936C44A61913ED1FF3F037F17
ACF1D035438DBF98A5CB09EF27AC6FDDA306805668863337512FF4B7CDC3A1E6
CD752BDF449CA2516F64772917E318BC068A53BC87B4461B76A3992F501D9BE4
5753FEDAF53561D04A85756D2D1E12544B5772120FACF93354D07A3672A76C22
EF9C4B9F759E5148DC4D6C488467EC0C191DEF56D1CB11623580E194EA461D1E
B98C9E9CA91408FB022A89A54E4BDEE9F2455957BD89BCAEA690344A9EAA2D09
ADC06ABFD66F92909E11D0C8B4638A7BF8BBA8B03CC96E0DDEEE9F0F760B2184
790E8C65064878CB66B6E39A01AE8E23767944AEA842D36D8CCA2720AE648C86
221DD794B1B324A87E95B6E08DD2F8AF1B49DA4F34E3D45C2D189175AACB33B3
DA80322BDC80C0F82198CDE0A6D0500049F17A0C97DAD0713A82B9A1C00B4A40
69143B3B247587B5B9B36B626053A5A686B9663864E8211082387B92C5E061DA
3AD7C3FF9BB3B0B7EC0C5F58B4B56F129943338F137A6D016A54A7C0CE735411
992B80EE9A67FB0195C20FA4D7A302C8651C73BD0FA3A458837713553F268D62
4E67E6144B53CF62E2AE40FC322A0A6889CAA713D457AD1701D06526B2AE3FD8
7CFB66CD1040AB25DE115EA908F02239E7E38214528EC8426B483D40523FBC28
FB7B2D6ACAFDD76C45D9A0B2955D5B785123B7F985562B2DDFB901FF11BFB205
B9A42E3D8BF771648FB97991AFB4A39F0E0788336CC68051863E486AB046330B
7F8866C96299802A33E30179D0E7225303CDA0F6EA3D53B316D1CD3C25FD43F7
D05CB5335DEB0C90E6F98BBCBA19E97A02E63F8B3023508917EBB495C994AD23
F06A5FA8F123FBFC7C0BD0D54B208702C16E1E8D6B7D1146CDD7B5AFD019FC3E
1FD05760E2F482D75661CE7936FCC5DA85428AFB6FDD5FA5D385A4BA1C80047F
55D212E07439269F51EECD4982F6323CB50851AD5D6C81EE04046B9077D7C76C
9F0AAFCB56ABA0231BF03AB1F42B03A4012D24040B361C9339F95B508C078343
651BA8CF0FB065F28A597C3203A64DACD5FD07DA3695A55274EE8D216FE011AD
1449F70D6E2F9616535631DEBC3F9D98D284D718B0504B1F41E493C544EEC9AF
172986F9DBF0E1909AC325B4C78C8F16F1BE582F904B799B0C7A494D21A11859
5B5A7BFE2B471E64D7787CEF7C7C97D2C1012B5E8F48102F85310FB0CAFB881F
3AEC5230B4B651DDBDE2A0F01F931585B42CBE3707996AD743D0A635392D1B67
28BBC6ED3479266254D674994FE3F1DC1499937512B239A7DC83E188867AB79B
EF123FB4FA468A55F04079F16A9F9CA83ED2AA40A26DAB2644FFBE1F79D3C87E
5869B1F3A2FE78B7BE143C15CABAF7B71DBECCBA65A0A8EC440A7DD31379A976
97EA3E518B8CCD7B11EA810BBD04DCE9F3DFA19BAF714F18960C1C5FE5BFEBEB
CBB4B576CCA763D5E134EBD4CF2D5F237D7F5218A3AE6760566649C19CB44103
559F1EC1588DFA95B7AD50189D9447C84B2C5DA2DA27A78C7FA0681CE1957A56
A25D1D04C26D5F5004C9DC98C8C733C577B5B10B7602F2934C3AE15223248375
236D5A548212BB9F468429BAEC91E19BF24D681D0679F0847CD867AA5466D555
15EFC3A7B140A75423CF3268CD2A4D589200F3A5764FD0711FA95894CBD1379E
002F7CF5CD1B4D82EE03D197B12F496C8510B8BB9213F678472D30C2F97151D6
BF0B1A0E1F5CC3060185D4D80B08A55D4EB9A629E34EAAA5C86F8694C695952A
2883744EABC36344F73CA4963E8ACE6DED8C9634128CB89CB7F2B5BB2B946A2D
7F2CB9FCBE584A8DA9F5B2E6AD49D02A0EB5E985A87A5A13476C7A69288674D4
961EF6F92F8460F4A3FCE74A69528280B0E52AC3A79C2DB3A973D896A1B5E678
E94BD76119BF01CD9CB82778D88E1235DB8B66BD5250DBDB2DE5DAF972D21662
6EAC2099EB7E110F1F1E56D96DA0C160EE06892F03064416A8025410AD061A8C
29E5E5B697419AF1A8B788F4D60B911BFD1CE1AC6C73967DD16EB20E17D88BDD
BB0B3D4332ACDF4B024A7EBDCBC012F7344AD0580DD023D900EB97AA61ED56F9
450922599DA99770527CC88AF344EB3861784F2251A3D3F767EF697C2293FA24
5B48A66C8F1E21B962BF72FC69878963180E35F458047BBDFAC7525136910F7C
7AF7F466D7E4991708DADED1CE5E875C29DE4CBB2546C6C954F26A8C2F192ADB
C6CC9773C19401183F586D1DA0E24AE71E7A566C949B4C53CB34178EB09BD0DE
0D19D74D0DA3C2895FBFEE3EC3DB8EF890AB1881AF63588687D9728FF9FB8BD5
5EC0ED242F2072DAAF49ABC937C880433AB21444CE2FA0936E410016E1A4CD8E
A294BE600CAA0CEA4AFABBD511AA4871CDD464EB921EE01FD044261A91C1F9E3
792DEFC7E422A9601E3BA8C7562D720F0322A135A756E3D703ADC17D66E6F8BD
192C2971879E375D5B053976C7931BB412C2A4633927A3DF158E35EE284835F1
75ECA990EC36B2F962E16E47AC7C079787EFC15E8A4F01B33D84121CF4970471
C2D90A45C0246C0637ABF30F0982D4FFE80F74F86AD1E5960B68F0ECE4B4673B
8841DEFD1DAAC9339FD70B087DDDDDD7166656B3CAC6C87ACD4A8BB48FF0EE39
597D9AEFD7F68672F546D7CE18B0C046CDD583F3307225EB4BE088D3C6F382C1
D9F15AAFA4E868A65AAA28F80471E9913C2C07FA55D210435A6F8AEF5C246593
8496355C038606B08344DAD9BC5A78524F7BF949A634AABCF7C05A89281F245B
42149AF39F3AA847B26BFBF11F578F89C7AE474B708ED71C165C5F208E8DC092
D49EFEC2DFDBCC275D9C5CA5C4EF9447D88413C81CFAAA316EB0BD52A2C7EBFC
D008F2ACC33ED5987DC9BCD2D1F5C85D28F714858B5CCB3953FD2B3C16DA05A0
6383EE2C5EDAE8ECA60D08218CBECF1528BC8720C1A7936015023AD23585B021
282D7913A7834F67C446866588BE5CB7D56D1EDFF257BA0BF47D2F804AD14CAA
3D31F366CA0E35F726D71E7B122DBCD3669C6460FDAD6731D142048B2A755994
6771C6921CC25E79D965E6636B253245A8029F740FF7774310DCB2727832E16E
7371883B0F3D78182CC0AC92509CA92F8ED2DCBC02C93BB3615CA875D42A7D2B
7664F15A62FE8765DE1047A3DC76BDBEF44E1BD4638F7BFDC1CC3DACE1C135CC
DE66DE6D6BFC72900D2FF0CBECDC298948B81ACA1E778CF1C36AC652502B1207
D31D18777A6CC189CD694A080353220E8A93885E478308C81391EDB243894E2D
29F4889D8CEECF1068515320FF0BEAE4697FB6501201824D378CD39E083257D7
F856E9E2C2BA7C91BAE00ECD83C45FE5DBE98C9556E089056AD7498C5C10165B
E8800FACFF4CCBA687F3E0C09FCBF804EC188DB70FF307ACBDF5778D6B33F5C0
AFC13B586ECF2828ACE90B06EF3470888B28C7851FE2ABF7099244EE6714975A
EDE7DFB75EB284844260935473C09068553725AB352FF43D87A0737C60980C02
72D1B6802775FE59E3551E6754B137F364A2F3C48E9D1BB18E1116E54777C061
1AA75D41FE1EEDE90148C6BF1BA517E09E74701AE706677EDAAF6426B4CB7F25
EA6FFE05D56AD9DEA80A72C5E311F0F151AA1CE637F648FFF6CC8DA758B785F2
FB140F8ECC25A774CB7EF0C9B799C5159CFD7BD7A8A258D66870EC5BBFF71607
0F5001BA585D9C731EB49F2F77DD5C62960E8E3ABFDA81DE51D1A79531AB07B7
5CC178A2FF6D2984D63B69988CF1656FA97A05A9F9F1F87FB403EB918EBC8599
E13B334F41157CA1A4B5BF070E0900A3D891B17FE4C8D92D381AB617F59C1E94
727876427C5D29A77ACCF8132EDBADBBF3AECBE940FDE9AAB0984FD262D5620B
CE5C02B2C63D0B75439B95D709D9A25314EE96CED5E9C999AC7CC0E980680D07
9A1E38C7BF3AF98122B09A8E62CBDCE4530D223FF8EE032E5F1B15371B62B47F
59FE40AB42A18EE0DFFDBD4DDE9B8C7D6C28150704E85E10FB90C99427C4E0BA
1AE5399C36A2C1C680B649758D771D9DD642C5C9E21CD8EF332CFE5AAC18A91F
0E4A81086C4211FEAFA67CCBEC58407322564B36EB13B83FCE5587D88D34DCB2
11F093A9557CFD2305F1735F782FC3C579E4EC0ADD2C56F438EC6925596225D5
C478E3A3804B75D06288030998E176389814A32E9AFE729EA5AAA01E16D31C9D
74908981AC8A3F045B253E64EF741C23DD07297B58E05386289E40A4EC3A0809
9A11B2E5A6366A7CA7B76D400AD79F99783FF0F2152F6DFDEA1D40F6975EB305
C024D5563E7FAB0B4F6759793DF07AC308E0DF48C8C9C38E8EBB889932CF400A
38FB33A86ADAB6247A8B5CB59440A1256FC7644ECDF43EE9C02CB6F25597F139
2BD48F48B78320863867BA7A9361A50A369BB4D36474661099854466C2D3CB8B
06BA8654B06FC58CC876D10EB96F069639699E7CC471277B3EC7244EB96FF41C
752C75845E76D600FF45A95BC81A7B670AC0CAD864B4253D61A9F5AB6BB0A809
57D76763EB9A704BA8CFDC6EE1BA1756ED4882825F5C919AA615A42599164B1E
555205169AC1352B3ED8B33CA13AC9328985BC1A1CDC3F4B98C16F67C11BDECD
B388BA6BDA870D43152F6F0BFA39749CAA14BD94A3F3093013A7F1441D470B2F
6135FA1B12277C5DC8B6FDDC716B6AFC0811CDF77BE2CE656BDBF2FA7A80FE07
FB21FD45531505085E04ADBC8B8F7AA67B0687F8D32D03B59A3962486F3C574D
4FDDBD383258A12F5F21DF87C33EADC62820A887EC4C356833062B764FBD5655
1D9849CB4A0F74540BD750FAD952777C3EA5522242B17218F3A49F533DA15FE2
4DD585715F63D7636A5DC2724B95BBB9BEFB30DA7A3DD191618E46AED1F008EB
3FAEE236BD6AFCBDF08C584BF5F2330AFC4841C590149AA69BD551C08E6E5845
93E0697BDE13CB6A3903676B641EA3D9B2BC10747E8371D69D540E9CCD097855
943F6907FC856F385703C2B7A4828A7F680BFBAA2B1084196B5A2CC1F96A43DA
B33723BF634F1BAEFBE45568C6F8F7749C67D8383296EF0D7A2342CFD6F84D73
CB5954C6D639CE6E0ABD9F2904B20FF2DF8B54B74DC49AA75770A1038E9D24F5
A37AA84803FBC5CC30FEE2CB68ACEEB263FE5A2F3B20D873570EBEFD87258DD0
22C6BDE298EFC66429035D86F63B9E0B7BDDF63FA5ECE0C77B2EC2602EAF2520
B11967DE10DA50DA84A97845A5F4205241ACB982B53217344078D22518403BE7
85B16D6838891EF59DDD138181066DE37629EB7795C85240852D4E0DB1CD84BC
AFAC4D56B9372F50281770A517B30E21CB12BE7ED0FB9F45769C584060E36412
8C2DDC6E7B107DEEB8FD2378DA228790468061E1821640F4996C9379BF716CE6
8363552034940B2B03FEA46B533808F69C9FC6A22F43E4E7B6959B4741A7A846
9503587599CD9EDD21F8824E637700795443F074C1376E1B6C5F668ED8199E30
75CA6AB98955BF24536D2E05C2A8B04CA2D32CDD53F0270D62F6D4AD20878AA3
DAAAE3C24681DDC4F3F8C92653B13060D0740ED08280A741DA1D9D56243AA0B4
2881D14338EE6DD2EDF64F3D6098DC56D9BBAF26AA2FA7D21620E8B72161D26F
220DE1E702C9A27C7120ACD65F7050AD5DE1AC61E5DE87FF06CB303D64A91B9D
0FA58B7BCD5DD644435758C7751FAC62BD076682DDBC81184903F577C9E6FBB2
A7F17E87224B80573592E3422C1BD0ED1AC2A92660E3471AF09B92ABB6CAB6CC
37BBCC28AEFD31E0E008BDD49FA3A05C0A20B3A8F09B863331D25740E9BBC8C6
3B6DF4CE6739DA1C27CD55935F66820E96699B09746D90F10AEA7F8F95A9A304
F8A3FC5CEA5382698F5F42D2CD11B737E963D4B701DE896730638F42AC88E8EE
488437CBF26A60F7225635CCCA1577AB2A60C3D30964389C7CDAF57EE9F57E56
396F2CBB3D7294599002E066EDFD837CF901898CEDC883B5E24B4717B7A2AC2D
A93141FE5D3B790C874FBFAFE6CE50481F856EB911559F22601C2D3245CD2C1D
7D4CDEA5A00384A1854FBB1D54D5E809924A33EB8F7F2FAE62FA11642623FF15
1571067F653DA20415EEC2C221CE32462DC8A154C1CF62F93CF0B7148139DCDA
4C95732E045FC3970525592FA46958219BD886A5D2875385154F4B6E1F418BEF
0647E83F34597B28167A08930A4DC190B8A8CE8FA7FCCEDE1B7A38E7D6ED2C1F
19C2ED6F8E49A57F54408379DB7BDE4DE34408DDFDBABC3831C8BDA4D97D7C23
C09B30F69B729FF8F80E37B05BB70D1081738E3C930893E11E955A3A89CF9C40
B75890D239CD022B318B3BA0ABFBFADFA19A8D772F8B18EA4125D7AC80844C61
EA287604D19D0978B3B0D475DD086929D013769FD71189647FF219CDEBCAA6DE
03475EED30EA711130FC05248344A88EA71E02B9AEC1DEE4B2AFFEA370E5DD1F
3B99039489FF77C3926651F5B3F866A1E79191CAA9A6E462813966EC9D5E7CE2
4CECB9E5E9C46BC308E6E96A339823332F9395F9418DDC68E6C2825DDA9C08F5
47B060E28831DE3E9F8789FDCD288F88E1F80059B23A64C80C2A421845969C98
65C83AF76D6E71A7D0C14485F547E21B27B4AE749D35FEDF02060FCF535F2886
AD3D790946D9A5637354F5E26B0008E04CA26B560EF522F82E96CB7983ABAB6D
40609312C31C74E79E366805D105561992CA0BA35080535135F5E9BDD8C3A4A8
E34FCA812EDF3F5943D6C2D9EB7FF6CAECBF64BE89BE527D74BFBEE2303A110F
38E9843A265F9FFAFF22080B90CD014F85194DA587BC633C0E7BE8677C11AF6E
DDE34F6D74327FAB686233D13CB6412BEDB1BBBB35794B3452508111C8F2BEED
3AFDF45B55362EE262C5A6306C3D56A94518E38F9138FE0A864609D6F78A0E6C
86A5F402F556EBDB4DEE0AFF6F4BE7E2283D397044AB0096A4896433657FE01C
5F1C4EF93FE9A6C00D55C3C857D99DF8398F37B7E958FD06E9A562819B8B323F
537862BCA7DB440524B6C902F6198156156642BD9DFD32CC8F803CB61781A9C7
C5524B93FCCD606B62E3DB95
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMITT10
%!PS-AdobeFont-1.0: CMITT10 003.002
%%Title: CMITT10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMITT10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMITT10 known{/CMITT10 findfont dup/UniqueID known{dup
/UniqueID get 5000779 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMITT10 def
/FontBBox {11 -233 669 696 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMITT10.) readonly def
/FullName (CMITT10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch true def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 42 /asterisk put
dup 45 /hyphen put
dup 47 /slash put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 73 /I put
dup 80 /P put
dup 83 /S put
dup 84 /T put
dup 88 /X put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE33C33655F6FF751F340A8D6C01E3
2E02C24E186BA91B34A1F538959D4450CB683EAE5B034D030186901B458D3777
6B3942BD2E07121385120248891AEC2EB33C4E3A0CF00828D0F130C31A918C18
979FE94379C648EF21ABF659253E43CD1253866F157F1DF85AE7E8714F061B1E
ABA3AD094FE8D6293916FA82EE4F486C7E513A06D4C9BE44306A8287970B4ABF
B6D1F9274A5A0BB6ECF713ADBD1260D5D6C4420D357FD486470A74B2F0621B59
A9373ABECDBF32FA68AABB66FAB0C970A3354A335FEDD513EB6237AC8EFFB213
218B5D59505B920425C46EA55A185ED268DBAE2AD127742473FD1018459B7E12
C21514D99DABAD554C53B868D24B881AE68B52684362D1AC0E86836194E335DF
BB6D37A7215F8F4F5C816783BCBD4DB6838DB92C13E514A1CC344B43D8B8121F
7C69BF2259D61B264AB5259DF53B7CADF565BABC47F75C56305448CDFF06E869
91043B33C8FF9455A99BF35290E48EA7FEE38D35BC1A968A6B9489068F78E17D
B4634A84F0ED0F884BA33B46FCE57168E787167E0A1E8EF21F7698BBBE25E23E
F3D6F8957E9C3E858BA10AB9CCC45271F2B23D423AC0AF934ACE0FF6FDC79523
20408F919B960A276FA88933B9920825E602C570CCE4C18BC4035BC59BF4F87E
6D05BE7CB7D0A77A6C8E666D73D216F04AB820F477809B8410941E00F743FB6A
55F98519E4B6DB552CCC264132BA31893928998BD1B95EA83246E90359D02566
715AC489733A797E2532AEEA34F3702B8FD10B35803063296A3FAD8DC11C0D62
13B2882C4C9B090AEA4097302239EC457537EE7B3BE94AFD5A8672E6069433AD
EA5F9A60B8DF0DE474067A65F1A845949CD12CC4E0919CB7C50C0C23AF8D6365
083C3D64103949AAD9A71FEA2C70100FCEE6E7DCF19A7AEF7584F329DD12DCF2
E02635F8710D976F815E76D3F3CF476655494394B44FADD9A9524EF08FC31EFD
A32B97875B55234F019F32EE4AD722B6669E27C2A629C3F170012C9AC62F612F
2A54F7B1EAB87B8ECE7B64A3BDA7B6BFD5B6F3F964656AE949F91F216FB70770
DB9F68C91878C624762DE0E5F88FDDEE03953A97BCF473464EE216293D360ED0
33AD04799EB9F1BF212DA7B9CF1F5E648ECFC0AFB4D935B09F36A752451930A1
D4B662BC214513D17885D824D250AC3F036BF6377691E603F12241E2EBD2713B
E665433EE1E6728C071FC10EF177EC0C2D3AAD49BD2A0BF511A722FDCCD196FD
BE73113298371228B82129BE4B0CA0D614270821AC770E51AE71C71E6B7796B6
B54F27FEB1D9FF8F6C4F3FB28AF32DFCD79B8B834EF8E02A818F8917A3CECF42
06E3629520D3AE254B77057D96CFB99A3F632EDE4C96C7D317ED97A741A31CC1
C39F0745898538A98F9438064838B0CC2AB07A065E1939CDE0EEEFBE4C2DFD25
8713853EA6C2BB6FE869F22DF67EA84089529E94D1907A110E39E87106C0129A
C9F89EF8D2AF4EA8F5C2E3B490AB88F5A35C666543BA2CB63704B1BE11E0E260
172BE5704FA6639EEAC366D5630151503B8FE147AB64860ADDF469FB19ECEFF0
B5C6F445770D069C43B860B5A9C51AF0BEF11CC8E85B067A40234281C77C2D78
87B361297AE1D1E38DC82512E4336F103268956D5328AAB0231173D344117D55
8DACEF0D83593A4E89F0561E41C5C2117DE3EEE523F9A2F5A5D4E544B79A9508
8F9724D8A2A5A63EC593C68A7F1709D0C336E8D09925493350028443C6EABAF7
3BC1B4BA5328595B346B74E2473C6E028D62D1738024CCE2F06499570F0A2470
BF9C8CF714E89B817F442F15A2F3383B1BF965219C66264478204307DC96A66E
8520A4E9B445772FBE6BAAD09EC48D3D123CBDFE23A5B09BC0E501018AEDDCC3
F0F4130A40AC7D2F9C92F38E8A011FDBCE928476B83C9DFC0BD847690D54DEA5
ABEE4EE33CF5245B63A2938FB3AF822BED0D19F676F1B989630C0EC2009B1269
60AD9B037D525641DEE733063BF7A0714A1F86DC8DF5005CD5B3EFF61C91266D
C4D10B1707A805229A9224EB91141F6F32591ED8E8135FF6F302BEF9F241CD4F
6DD29CFE584CAEF98061332EB5B42ED514543ED6A04E085CF5A6CB2F55B73074
5EF81F814163A0D511EB991F14A3E2200FFE6DDD6E0D55272F0C2069455BA19B
C940F887B4714F1A0A2D4E1A093E9131CB876E0CA7DBA6BCF62F53E555CF5099
749C14792661EB4DD335E7A11F1AF6D384144612956436115CF1CEEDA7B6FCB5
5E467921C2241682D3CA4DA8835966CFE4BFF28CDA1E170371F5A733483BF0AB
584F299AB4A5AFB92E208DD4A9936DE42A15B64209E84C7DE7217557FF5D1670
4789354D5A9139E7855677B3BC13172304EF96B39526EC6669566FD03E3ABB5B
ACBE913DA50C7CDC2F7B40FEBE1EF089357E3671F2D1F1CD3C06BCBF26C145FF
1FAB6F96B939266F340D58247847186D5DAC8A0DB466CC662B078D2146882002
D9F302B17EAF2D9473D0D01EC39C3192A4BFA02DF4DF2A7DE519E790C415A2AB
C8AE8A20C7E32793E2DD504D8DE9CB1AEE8EE0C2CD5CD33AF7B76460E0C86E9A
6775B8BDD0B2C843364724B5157A88E6EA26FF36D707DF7E287BC095C67BE1AC
0CF45DAD80EC298F7C2C545CAB5390FDB55B2781006DE8DCA8D32023733A67FC
08B6DA7792E2625088B529FE9E56005E96DFE1378A89B96A928871C0B12AD539
48840E2A199F5E2EEAB13A3E44A16C40B20213EE5D90F779A31217E77DE30E48
87C0490F56F304BB02A8D18361115BD5581B668A3B97EBAB3535735E42F34A96
C1262FF1658044E49F87A9EE78F7FB8A66DA1133D3F0A0C97444CA3881747EC6
096566CC568579E39868263B5FE0AE06269B9B1E63BA016145D195FBD43D2D8E
59F4244C22EC206CF35190E73B45F78AC1699842B7B2424AA1CB417A1099C199
3317D7DE0810B458720D1BAED6F62A8C9908CE313C8627749DE3351A5F12F717
68129322C88B33E509A220B8E7C77480953758F63E7DC4BB16D4A57418299851
F9FB3DEC9828DD776F68F6EF6DC49C80A6179CE61545DCEEF34188D427A0A56F
5D1ED5BBF95A87886C4A470FAC1D3354F56041394FF26A02644E0C9E00ED27F3
6D71698AEB5E01D2602DB0D0FE89D990B50E8109A5C371F779634061DD1532C3
6FF8CEA071355CCAE35DDEFF37549C90976D8F07AF9CB422A57F6CEF80DE5FC0
7EF473B53FD22FBBC37F1E6D0B9643E02EC45AFB4C2B82E0B6194348416E5617
BAA8F9B3F117A53E1FFEF6E367C7D45D4369C8986C3BFFCDAAC740C9C34DDECE
389CC09B5543DFD829F6B441850FE4887A9470634E5A80544F4F621D2EDB9338
E2185C76A769BF55A86E8724C33CC57775789AC5A5038F416698EE7C6E699B2E
FB6A88EB33C14A102351BAD30637CBFA351D129EBF622BFA364B0B8E51810276
265C795C55AEA4AC7B940D016200FCEB2D6865DB5CA1DDE566068933B3F55CC8
068A2D25885D2B6B7A23849B14FEBDE185FFEC6F594E25CC563A2713F84F097A
0688764C8BA0B281A24904EB32D7CF5F9F365323428649570C395BB7790EED3F
D38729F6E8756783663786E0D2861F69129393D673E60FC72DB2C69AA77CEC34
0388E5F50D2A4D4C17AED08F231B01E4F90244C161CE968B80E96E455D0ECDBA
AE5C3868E4B60A43C5A7A304A1FD8B80FEAD65FBB2F1158449CC74E84267B01C
C6A0F363DD94DCECD26E5C1A9EEC115D470956A256A2C1BB7D3F83302C7A105F
375EEB758568F55E5D828BAACEBEDA734E797C5ED89BED57F9610797B861BBAE
C6A09263FC763BC1ABC2E5CDE710A6023A03B8E27E151F5C69F413E29524D761
07B0B240EA93D8DD88ED488504A61B5A6E6F81C7CDE292156400AEE3F4794D17
337569ED9B6DD32CCA53016C271B4B7264EE86FCD487F02C53029FF1B4ADCF08
40A58608CF09546ED89A81A88A05CD6B317938FC3EFCEA773BF75C2E2323E2D1
02153B8454ABACDCBF689778F25A381C2F5C2EFA742BCA041946999C94F2B0A7
10E0AC8A1B1D98EEC91CCF8971E475AA901FCC5615DB4AB48FF342B39ED4B5C0
B23BAAA38700327EA902AD697CDF413E1FAD122996DE123C5835E5934D88F7DA
40B63AF93A2611C650DA43C48EB92960D098820A8C763EF54F4DA8DD4A7B14D9
836EC35815760F656FB59F2D8B308764D2B74B3B12E9996F93A70FEFA1526E59
57716C870ECD785CC0B21F5960F0A5ABB8C2E5C2366221355892A0406B9EB9BF
FEC90B3EA444F61FFC6E8B4D4F3272F952696436B7118F7ED0AB7F4D9460EDA7
CC89777A6FCF1F572981184E33037E59AB4663E84C9C54A4D700DE01BFCBCF64
91DD7FC8EF01E07C2AE517E236E8F8F744798C15B5DECEDABABC74ED4744DB22
6246A7443440EB0644894C5505C2F9013561ABECABA627913A143FBB2CE43862
A8361E4B21015B4C0839A1B4BB3167337A5D46AC4B887527027EFD88D54483E1
47FB5BFDAE38E2EF163B5F4F63F20382A6F1A8787931F61A70A35C98821A9792
42EC796B26CD424D87890CCF2C8B86FD460EBF21A483EF924AA40162F0BCCBA9
4D97E805E54CD3C5DD4D202A02CFBFDF349E4AC7EC3D7DAD874F67B67E7C0F5E
D79E5AA331C3C37577CD8721DA2A9F61E68466358BE2891863EE79B95326BEBA
DBEDC5F88516BFC13A3B1A365E31F1E92A32134590367CB526274569C7513BC2
31A576C6B0758D49F3E9D5323843CF0BF3C1528E55513DE5F173E8B1F0C0AF0C
FFEED79A40A60FEFE25AF0813B9807D0A4B6871D63C48A0E0E77884ED5D9B500
29AB9976EB54C94EC7FC291C95CA3CD77BB8D3CC315F6F98485583C4DCBDA2DE
9A2A80CDB80AF1218EB75C934B190CA263E15886FA530A41BC6F45BD45A4D28A
BA98D2A6BE4D599B8B4CFE4CCD868CE29857AC764A197E804B4263A65CEBF488
3E6FD60B483876DA43EFA58B6A8CB7DBE93DE1814A9036503B5B32274CA23B97
356205898DAC3FF83B0E15EE047EE91B05A51C9F6087D289F33FF337B003E439
F078968459AE9F72193BDB409E4C730AEEF979E91A7075C28E78769A43689A64
40461C0F73A04C661133E8F40D90D21B36060880C91DB6F775658A646E5A2734
3DA3E08C0F23EC9741A84D3799865D7C3B977284E50412759467627905173A9F
7F1B655607E1C6984251A29D5ADFB1663069AE8CD49416798AE78142D70C4B7A
93B781AA6E602BDD5936A3BAA3486AD50DC0351DC0BCA7F2C94527FE4E78A4D3
88642FA5D41D78BE144893803C1AC31D1909F7B95DA9A6AAEDF09FC732C67046
BABA6262A125ED9F8911753921D99FD5BFD62D6162D40B9D36EE8F5B916F29C3
9A5BBCFE4BD15FDFE08621ABDDF6149ECB7022FBC1C825940C3E4A0955EF8935
D77183217AE9DCAFDA4F95D201A33B36CE4EEAC2C09229221A3017EF13B5259E
82AF95DD32964F80941D0F3B4C53582BB7A564ADD9DD22C3A634447B2622E52E
79A66716C5C2CF949F133499E7A388028BC06B72A901048EA5C9F1F5A7E5EA03
C2D5D684348908D73F1CB10A4CC1013F62B6DE928F3854C1EF5B6183910B4E21
DDCA07640F25C4B740D648669103A12A5B67C8F33126270DDCCDA6F29699A7DE
90231AF8D5244699A2C7A1D5D5D24842DB52E5DAE9CE53927F0CAC0B2112D5DD
A9D6E530C76B10C74C374210CCE82303798FA1C56E3E82DFD89602C4BED2C21A
82C3A8883C058B9EFB10679EC1FF3DE615ABE07A5A65E71101F73CA59F1A870C
7CE613395DDF61F5EE55397AB79A4FD7A8163FD8E243C7B68755087D75E4110C
81112821CC4806EA1C21411DCCBD884137DEDC26CD4449B3A1EDD3E851489AD5
CAD00FC143F0691C2362631E3AD9E182CAABFBECC9B9E0B43190A8A22F6A9723
A71F77838C3E3AB6BB17354EC2B0D36C04D7E8A19D3CC7217A633C31FA1F195E
3ECEB3503F88BA1D9ECF031D3935AD0652A351968A3BFDCDD3AB7CDE0D296E86
85885DC989C4AC57002CFE812B884883444971D9491B0EAFBA9CD6A8786F1187
F0EE3477BAFBD0E751DAF9F8DA8C85E120718C5401112F1E485F824F8C188FD0
05E0F0845339587854A66BF257E44B9861619DDEA8BD219BE5769C4543E12892
52DA67AE1F8E0DAC6DA6407D26298191E35E29EFF899D6A8A42D249370891EC3
0C25815E51B7693EC91B01DF8F4F2117B3DE2C600667EEEB2FDD01EF50788788
11AAF0B2D2BFFB68F448F579157EA9BB1C30924C81A475C4F88D97BAFE56559F
FA0506FEF286ACE2175832810F6218B4D2EAD48A6C4EC890F37BBA7CDEFAA7CC
EBB5C5B6D0C7421393CC2281ACF635426F75E727921890B89820C0C54F40665E
3DBC7CCE38F82DB49B2FD7782A2137788AB2BB1A0CA7410BC8DF6000D7A571DC
172B2F4FB337B2EBB6909627DB3E379BA06B2950DBB191CC7F82FF60A35C44DA
DD8654F5CB0E16527AFFCB7808F221F6919B22D7D561DC71308C5EE2116CF0CD
8A6360805D397ADD99BB283479781A013D21E64FF760949084E3E738D14C3D27
6C71DE63CFE568991964B5B27AF53CD9729220E7EE648BDDD3EDF670570AA562
2E2538BF3B365AA3FB4972AD73B3AE6513D3B46585DECBCA2DE04C8C075B7DE9
E2B1071861D35876451B8A7F59551C51876845022A7EC1064E479C4DE014E8EB
D66D6968B38F789035EAF314ABE2EC8DC24FDEB0B8D5E98D824D40B87D09F6F1
6243D4EBF5319C82B093D0E41FE17CA5277D20B7454F02B8143CA32AC8ACC45D
5C058D6840CA8B925B4BD3D01C5C6E6F9794C0CE6EFB00DD94ED8EFE1EB95917
A8B93E02D48CDAEBA7C3036DF0DAAFC09872589C96DAE90DA425C04D27B1B1B1
8F30B229E4845EF29B3952A18DBD9E06A23060FBB79337D2A449E7AC27999922
A1B131803EE8F3498AD6CA2DC57E3D99A24F84A69279E69A57C2198D05A59F0C
B2E265B0F166ADF6D5051F10903C89E292112B20F3B3EC8EEE508D532C284799
723D30ED3D209701029ED447710E5A85C691F3DA6AA609ED85ACD2E5D6B2FB7F
F45D2005EF770B264336AD7F83F17EEEDD343E60577A0E21A13B9856A732980E
4E2803F06D9DEF65AACA914647BB9D4E8F688BB83D05393463662E0311BAA6A9
818EFA495DD7323A4CD000A9418192BCE2D4EDBAFBB375C13A55045432A42EBF
839519C53CEBF9F48D13B33437E4AF4F190DBD0A6934CA7BB38AC9EA51751965
F7E80C6F3E2B7AD8B622239E0CCE27D7A1382CAE6433C14B5B0AEC8DC6C26DB3
84F40E4BE6850C37FE1B7CF2C631A6E53A06296CB47130C22581355FF8EE8133
88EBBE22FD64181213820B905BC93B6238C8586B1039FAC2076E00B8B38BC409
BC09A2FD62C42F72E21A1749B52629A8CB921D2DA3C1C6CC572683F30B6FD479
776FF3FA9527FA1F952F7E81E9DD9A1FFEB8BFD1927A657F6F9DF21A9D6AC39F
175E67331ED0747C39082B891E05113D2C43AC614FD23135D0FA723BF053F844
805C8A03F325276D1B6774C414A926B9E6B44ADFC5F162909539F89ADE628E47
02309F9972FC6100BCB6340AD702EEA56D4C163C9DA5AE164ECB19545B7D4E5D
60411582BF0008E6F167457BADB692EFE16F3812693E994BBFA77BA967FFD647
C3B1CB598C7079C1EA19026C8DAEA27DD52402DFF3E8B83F7F02FBC73E916170
F3F6AF7384CB5C749A88078285336EE015AD255F2038B34AAE8AD985AF16F82A
42EF120C9F11735C8B77BF34C8F31C2B863FC247080CC6AC5E0FA7139DA9D0FD
A417E065866D32AA26F72225412D6B2A4E81960FA509A8AEED0F2AC3BD3F7374
AF554E13933C1D1A324E5A9259E2A08B81CB128D349ABD1ED4FDEBCF6A9B6B42
FEAB7297D9CCA790B8597DE16DA3A042283E32FDA890CE2D0B26455E4691BB93
7B123638E8D385CCCEAD1FE2BB09C8DB396EA504C29A10A69ADE4B523C6CC8E6
C44240C3629049600B963B2897D980D0A34177B1F7015045ED39882DD6BAFB16
E32540515199604A6EC2D191CADDB627F753A56FE4CD66605048C84C283BC239
6BB8E197650732F14370B50627013573B4B3576D8A86F270C4C85434D58C95AB
D1E3B1524087EEBFF9FFBC43B3C2133C711E77B1FCF91A3913CE5DE111A360BD
67C3F186504406A6F5938C2EE003809AD3DBD91D1A19E7CE7790EF1A37FA57F0
A56D8493DF63BE30663D12FB3B84557CC41ABBA7FD04977295A51858E41FC4EF
FB67B392DF6C742EB6F09D06B8D44AD7B1DB9D17667A3D6A470C1D8DCC15D912
9AF1FCE1FE63EFF1729B370090476D1850BD904CA48AF20CBDC7F7ABBAFF860B
AEF272F3841E9F2DB4984F098D6857E30B6BC25CD8624EDA01B7013B8C31F0D3
FCFD8D457EE98CDB59A5FB7E3B8F96CC478EF58F0CF60ADDD9D83ADF9A2C609E
2F765037A81BF81C9CD2027F8D876445EAE7C8C1FD306A20F3E54E8C97007FB9
BCEC159D3DF63E1FAD734E7E0E866564A5A64EE4ADCBD24EB17C95494EB57BDA
22F1292A89A3F4C6A94DB60F1B05910970249C242B57B5D6D34E147747F2A869
BCF2A275997794D7035187D713FE3490589C01E3CD358D3B1EEE4B0E7658D5F2
D235291FA858F6C883B6E9EA39A1ADA6C0B005F33BDD0BDDFA064271E9D760E1
46E39C4374D371C10ADF7134341529568B01239707D23E29D122B001A925DAF1
D8BB6E5C83D0F5A2716C669E899DBFAEBEC6EDB2B03340E5EEACA7F20953C83C
C7CCA3411EEF27A96E8F44303449880B2B62150537A3494B8B01D0C360D87C2D
A0EF82F99E7E2B1092D180A0B48EEEB58F1704A56CC167B69B2535935F5499D8
4F5AE079D158ACD8EC95550D3908E5A99D81374927BE9A899D20FEEF1180D403
6FD8C22BADFDEBFF93FAB00F8EA3BADE0243E384D494076AD1A34B9789310CA3
7DAC07D56589C613F2BAE5749F29CEAA86F2BFB60E2C6F55B78081431CEAFB83
DF6BDC222F0AA2D56C50F9EC8495B14D7C46DAF217149FC832F6F56E3A8A9839
663086FDC379C3A698453AEBF2E2B4AA7B71B28BB28691B57C78B1287AC29729
0163BBBBE07017E1BACD68E7367234400F2AB4337BD48BF04D02440CD96E6561
632DFEDE3D196930387088214C7B7D592269786A8EB084F5834714DFBA359B45
124ED05F533BDDBF24CEF8E943A6E7D87F51E62EB21166D99DFC49424D27BF7B
B1CDAB10CE4840D7BA941E0A4D04CE79710C9275A3A8D50FF87B9D6A5F37F15D
DC37DBDFCC183112DA905AD7735BD0F0A10F69DDB1D2D5EC873DB39A97643528
136551A7798D8C90F36FE57ABE2431AC4C6BA8D92AF539879D65F7009C02BAC9
39CC28EA0E554361E2C50DD6D165FDC5B98360823C4F5E5B6310469E1809D9A9
E709F26AA45E43854BB8E927A655D846FFE07ED292736B5051ADB5595B333A06
18B7C4B25A638B63D04D1A19B67624546DF6522CF94820DDF50AF2EFBCA0129C
DA3086D23F47E7902C0AD004A219F2201ED3DAD6D91D1BDDFFDA043CACA03246
98A6EB9F04DD1632EDFBB7DEA05AAD4AA10D5646EA0B6589BD0FFFC68BE17F7F
510D9EE517CBD0AB4AECAE1E1C6CF84278CAAB59E25CB18F0F034B9437AC702C
DD645F8D6133FE0146C0122F4C795FAA7210C4BCC86540DBC7CA10FD0CDE8FFD
D241E34137B089660B33001FF2E9F2B95C8B0F077AAF2DCB4A6560B2375A1543
CB1B0394571CD59276302595B10FBB401C3AD1E5AC5506CC27BF5A272A3575DD
E24207A3A6B4F650D56369195CD40289A7D483E4CBDBCED58F7BAEB44A443418
EDE0356CFE78CFF5C718C2DE85B5DDBC395C258C4969
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 61 /equal put
dup 84 /T put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 119 /w put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD10B4729E5749A10EDBE644886443D1249
2C8517DF8D8AE98E2882439FA81903941B363A7D885F93C6DF9E1FD89F2F8CEE
B870C409ED13E78B4C914813B0A01DF8F876EDCC4F384055FD37C575726AD69F
F23D50EC5BEE2FB95A44F2B2E2DD94C933D90BED2C97B53738B4B2ED56EBE617
BEF17B9DF4F314A37F10FDE34C570D7BE76A496A58242F51E7321380CB042424
855F4B53071DF5A0DA5A31B8AAF9FB4F4C491625FF8FD008BD4402918043BEDF
77B840B2BE0DAAB4EF904FFEF935954AFB9BD2041241B1BC8519EB642C89E288
479664226DBB6F1171F9EEBC7E1273D0CABCF6B1BF7F26AF21C21D9B1B916F4F
603DDB68D3614B86566FC91D67AC3F4A4A96E256FA1A3BD35F4465AE4EC64D82
34BEB4BBDDCEEBD9A89D932E55F14CA2776F927C4FD3E0920790A57DAEA08C5B
169A3E2309DA6BA8684A5D1DEE81415796E13DCF906FCDADB092047831B16841
B250CD148557D72DD7E683BF122B38E2C4F614E59B395D1D9823D7D5F126D932
14B50A37FCA7120F8F3A8E42134F1B6B0C248D56F247AA68FB941839F600F61C
14247EFF780BBA3E5198D37CED44DEEC3455048FC451BCDB48DC414AE5293A60
5A59877D6A42FA7AF1CD28488C1FA0A2D5D57551A68A6479A8FFA785C2BD2D32
BB5F20CFCD667AB094E382D582BEAD23DF0A82CC481E2DF2F7B0CE752DB13736
3373816937321F70D50D6D61F24053B2D53F0D9433CD9F0A33FE83C973E627DD
0CCC64457AF3C439E130540FBCBC2D0CB410A2986BD4A7B118FC52BD298B1DE6
26D7348E9A27E721E0DB58AE8034A64BE77A35CA8567EE7B87B270052843D6B4
46C3B8817FF88202F88F36C41EE1C42B5BE295014645895872580E379881BE7C
CD90FFDA7BB3B40A6386A75CC6DC32B110F005A191549DF2F43E7D52E442E8A7
945D1DF17FA4A20F18140F4C14D8719DE497FC97A9D171AEC4C9FF966EB2A72B
35A074D10C98256868B461E056C6A78047ACD0F86DDAA2DE1EF3C6CA054ED739
43131131ECEE2A39FAE6EE293844EEDE173452C0642746FD2A9EC08ECC3F08B5
6E85648F42FC8573EAB04A3356958455286C1A02208B0355D14C218D571C3EB1
A050306F1A27C8E215F5894EAE38B79395F23CEA0624BAF427A30EB6E92993B9
DC53E690A5557FB4E93ABE9F95A4D76117CA26949D3FE6160074A98F5E9039E7
79B826B047A5B9FB43E3B96CB32927A36FF5B9354A2DF97AEE0D09A156F4D61E
BFAD51DE7C311530920A93FD6EC3E470330AAE465EC3B744AEE2F5C10C12018C
E74015A5F973442115232482E21867B22A7AC4887D3E82F32C16064A2684EC7E
78E1AB35E2D841DC068CAC8FF7F05E627E42F2B701DF842CD80161A57CC3A2F4
7F997C4288AA1C8CDA5E3C6F89AD4B0309808BF57FD24038848D6697C68C5194
87D2C0D18EFC778584AF39D2814139E38C4BCAE9E1CD3174CFDDA0974B9FAD12
5502A33F3E65A94AC101903963A84EBD442A298F148A17EF4A4CD214B123B211
2202761FBF8ED90C36858E64403E0894616BBD9691E64833B16F5BD6E4B65B1B
D866436AA7E2D2C09DDEBD95B89FEE748C24A37E511A043B25D4477B713B015A
306F1EEFB6694AA32F7803B9200043E29A62AA6361AE5A39C14B13B60EC484A1
892E79A94AF0B3C21C166DEAFC24FFCE043CAA0AC2628860391ACC35650B8E39
519B2B7A74224DFBE0AE16560BFF5C897A1477441B037218C4BBFA52BF99C9C3
01B7E591CDEF451A4B2DDAC6A751F90B0CC01B4349DFC56DA3E9F10D4E690237
CB8D25DD2B8308B3CE320C7448E0C50541DFB3E5E9818697070551BB22299DA9
DC600CF989B042B6B08355F6EA716C8111EA22AA11A489B87A3C6A208E9CB0B3
0F7AC078DE479B9877082D321C9FCC928638FCC2FD5B04E1FBD7C545BC4D21C7
EADB5AD309E2D327457D09F34FE893F6C8EFA3CB01B31B63E3DE2D592079B66C
FBF9314BD826DFD34841FCB3F5ABF01D4D31ECD1E37AE448AE655435AC2F1D28
6D8FABE0F6236D4B2DDBD668C43C513C35A99EE24EEDD22618FE9C8A973AC48C
97CC762FF2B22500E29F314123858705A7A9513724F9C6B707F99254773C6592
0E5FE7864460FFCD520E8F235DD7C2D71CC801CC25791FFBA7D897D7E9C78845
9B39B30321C6ECAE276B63BF69BE5E896A911EC2EB559845C95C82F9E3A4550F
68747152779723C0FD88142AF8786E14A6C63793380EFEE489918FCC37040DD4
FC54B214116AF7F3BF18AFB4BBD6676B9337B75792C59220331D0921871226C5
6160914266B1D28D74185B0E0FAC89BECA04C2A2D5F9F6C5D3CD3A1E7E4AB8D2
2107B371CE5A7F21765D7F23CD96597C5D22D0EBF2518374873361619A3CAE91
33B9EAB844D7CB3D6953F1416C425C97802EF0E60F20CA163602B765177BF66D
7CCB2AF338C1B62FB31BD32932080B76BAA2635F3635D60CBC3310F72DDE3B6E
BB80FDE38699221D4C5D8FA1D61F43DBC7AE99ACC8EA60B7D15173816B647152
6D408712B81134369258EA69D149FA897899F33D518FE43422BF5229D3E54B38
2F98B22E69F0E066EA75B78F3CB0D6CFB87CEF468105A560A1C2900D93C758B6
8FEFCF36B86FEA42E1967A5775ADF93891FC191896A31F28A820DCB2FF190C52
18268AB1C2CF153317813E9339B93550C6D4F0302A61C41E33E7F52676F167CD
6701C04869DA9D77CAEB4DC19B208032686307842337CD1F9695491BBBDF271B
5345C448600E01E76C5302A0AA80766191E16C472DE780EEA5BF4F9C42A84B89
6F065341C48676342C1C7BDD48A02322F23B4F3088E7E6AB4CF4C4A89CFB1113
B88DB49924ADB5BC251CF3C996993FF175F92C7170414BE46D007753445BB2D9
69E2D16E216CC76C8C0EBF1DC6F2171C5C56B6562A15028F1415FFC45010EEEB
E12B2C17FF1D848C3001BD0F48EA41926C974D752397E6D2ECF97FA80378F4D0
9DCA5CCDA0001A1085469EA36876807E897654C45F406D596B80D379CFEE11E4
F1C45B06F49C0594D1CD925DDCC21CFECC8F7BC1F14FCF654157AB9EE52E3D3F
157BA9036D8FFC6486E78297F2C011BE5763AA6AFC837716574D27FCFA754456
FBD32AE761D29E7A2E61CECCBB294DA4B30354746198F0E08C4702F89F660AD3
0AFE28C54522555909DFFCA2541BF890AB4A86837B4A93AB97A65DDA8F33395E
B773DDAC7E0AEF0E9644AE0FA1FF61A68A90B3D8A2F96152638A0847C498AF4E
2C3CF3ADC3A1BF067AF8B18BC0CA331E0E8C422BDD0282294C8173E82B508A7E
300D3336CB24EF5B77E0CA5A4AFBE10B43994FF314A642961FD10F50C123883F
159DE08C26F51BA75F725249C5FD6FD166C835E1CE79E47B23ACB047CF57992A
19A5650C72BCB68E1151905BB6DAFDCC4CF3281A312EEEF077C86C3D5EA3A3A5
0653169B8593FC3F87DEB0F663278B252DE788A0B966B6B38E06BFCF5CAD7E90
636DF67FD47B0E4243A9295C8561F1A7D4FDA066A17F3ACB2D35B3FC14D551E2
092350BF03B7D898284BCD42C5AC9A721E5F5799389D828C19CA1FC38156D417
75E87C2A24DACFD371876D3E6D41175E0CEB178351D6CDC45E3A7E6F5E06FFD3
69E561968FA19415D8AA427D056DB8B5BA258462B2FAEA1826B3410BA3333480
C76BF347797DF580DA0E0A4F13FBF20B25DFF7861ACC701A8B79148259FA2E81
EE1DD221D487447AB5ABC157BDCBC829C038EEF4F07B14F01B02C1A4E8BE81D5
31A79C6D5AE5DF43B5A93B8C7DA6D16F64C3CF84DA831A0DDCB63267A9A7701D
D5EB7677649A26D94F0C3E97B845D254B0F9C1787304D67AA4B0F56017059D00
C98F8929AF7E1DB701F8E34518F746A56ACD5CA492EE71D716887E8C6AF44424
A9C55FC5119808F6ABDF4B0A7D1B1851366A61C5F95FC2523B491BA1351720B8
37FDF746B25DBECE69330EBCA866F61345D046731EED77D6ABE51A8F83011339
04BBC4B4B5757A5A2941761F9BEFC47D509D00529C1EE3211DC731B967C27938
4A2A86BB1CC6E8B8338CF14FD717F1451EB8DECB4EF905677EE677111AE56074
D244AA9C1835153CDE3AD376653C15DCC4F193372B996D1CA438C73E0B9398A6
73854B71ADB255E73EE80E1A6E3E38C1E133166A2037B3DCC6551EEB2AA8122F
42215706BFD6DDFF24FCFFCC4A92E7F42877DF7CEE5D78127D95CAC7A08B803D
EAD06301AD86E398FEA0A267225C8E17CF1B434B7B5638710C41E79D6B7FF1A6
CB07F1DD564099F5999DF5741329F722FEAB4D1BC344C52D2FC20CF13BEE27C0
781E718D4F1E39525DF38CEC1232C31A99B7E8C060207AAAE870A020B5F09DA2
8E1C670DE6091EF4A5337EC465F422AAE35C8824275ACE5F75B0F8C62D0AFB3E
205BF8CE63CA5FAC1E62581E50A3197BB126A88A279B73A0D70FDD85CDC57A5E
5107D8DD818D37075D53258BFC87772B7B0C8CAE5F18E87273F356C537145596
638B04E152D176D2678016A954595D5D65BB57212F6F7D57682B74B699BC5973
C6D7E80529D534904C47A1F7FA0605364EE07893E04C058CB482B7D5B2C4084D
EEB298E795C0A360C53928E33ED315E0198E70D3B2935A55F52BE1B32287D172
43016D75079CC73169E2B0FD983D1CB09BA78200F7F2E10FE9E8B63480E1630B
8A42D6D39AEEC36DB877BBED33AFEC6F7316141C4211666242188665FE6C3CB6
F8A3E31402ED1C1B85067787C7FFD46D63803595B9951B915F87A9CD985459DD
2BCB2501564433CE2C800E986ADBCFFBDB1DEBD8ADD1432F7EC3B390F7C9FE57
3A1782E96836620354F310457F1E05095E4C29BF96DDD9FE2E45010399B7471F
B3C248A9360CA5B03F59E3EA56C4C34AF9B87BB1785916D8D4F6391D68267EAB
D09BFFC435A578606456D2B1EBCFA1A63A1F0C72E3E667C585BB4908EC4BB692
B214806E54CD2A15EAF556F6326351C59CBBED62D0F917BE71FBE735DCA8E832
AC4EB86758CB26268B4917C5D11B149C4DB8EC08CD2A1600797A8E52419220D1
0D70C04D5EB1B1FEE5DFFABCC582AB927EF61F46EAB02126E8D0C1DDD00249E6
1DE6CC878C86D863F2615EC5D03893ACE7ABE2CFA5620DAD23F5796300354A25
FE6D3BF2FC9B18C1D1FAC6AF9CB942D35C75852AE3CE3A4A8287EFFA558D3B76
FFF30EB82DA5376104C6B8495FCE4B4C4E7D5C3A32F841DC7DB5D4655EC1FC24
E3B40E2C853A0FD95F0EFFD4722E87C1E894455157FE7114315BA1339A373A7B
38665466EE47E97CC515687E1FE7D27B96023F0F88BC8EE74BDB1A6C76F363C0
548B0B360A665DF9A317576CA3E9BBE121B2D054220EE9929F14F9BA5896DA0A
19E2CCA8BADD6D3A8F751B87D4136A0506948D9FB5F0BEF9E0AC5BCBA52984F7
825BCDD5D34EE105B20C82B30500FBD790FD1C23FECB3C107A497D70604DECEA
67A66FD28478AF5DF1D9AB7A19ADE5D647ED5CAAB1D24C85E06B171669471434
5F7D58D7A9A8D953709262B4172535586F2BE101731ECC011FF319477A125841
87115E015BE6F88361C49D923F4F4581B9C7061B799580A9ED7959A1BC5F7807
6E4323929216CA39D2321035C518690C378361FC8CBC09CF5B603ECA66CC267F
3AC68627B77A554DE7F35F8F97D21D8D0F8CD897186E8E890D6C2A7308489440
2AFC1FBFCF6BDDFF0EC27750E1C773D4AB2539C112CBC2C4C9ECCD9D41A02757
FE8442F0C3834217FEC291B703B09CAA5B6FD885367E62BFBDF3CFB317B8BA86
9E01CA13804C7DC653124CB95AB93F360381FC072D9025741E24E14E3E741C6B
2CB2FD86E10387ED7AF3DE90377B53BAB70A28BFDE1F28F4CEB9617B562444C6
03027C43DCCE0B9B57C16E05CBDA3CAFFC28FAAB617F5388F8B9C30D33CBC0CD
48AF7BA2198080FE2D8E4F079B503CF15D17ED26654B0B5C90B0577075B1258B
C77292A0DDD588D5AA05E8E8DCCDF1CC668F352733C0875A4CCB8160664299DF
D137DE7655EB9B7BA13B71EE1F9CD22B2D92F393379507FB852E0A92ED6D70F1
F1E9870F399E937BE90E98D9B50AEFD5008EEB19DB8AA2958F689DFAF4FF26F6
A1A576298D26092EB6F7984CEE0645A3FF9E9E5365A1F082B5784766598E21DD
8BF9583D40159FD334CD81B457B11CB755EB8D6D771C6473A0B86702ED2AE30A
D7B428F966ACA19B2931E546CA3D403E02ADF64C568932F38DB36BB6CAC496F1
9A414BC3BAC962F983D3B6C7402962A0DF06F14E1E6F0A4CC22E0AF293F646DA
DDEE8B903E034A2D1417981A063F5F0A621FA14CE4337DA3DA9A158E37312962
AD81EF5E27ED33CD51F69BF160EB639D4F90DFDA12853056DEB651B8EF3AEF3D
BE41775301785F8C2C10F81A63B8CD583A6D567F0C41B5DDAB0BEB39C341C097
B09ECBD676D2E3EBF17D8CB2FB8B02C236D6A9D0557FDDBEC8DCB8AA6FDC8383
EE4CB6FEA864EB40EEB97B95C1CDF848503C5777545A0BA6077A2003E99DCDE1
5008E8C6A1311E04C0908CDB832B33373B4A5C2BCEF65C93BB98294476ACAEB6
FA533454DFA9989DFE9CA19DC46EC46C8CB2898462B6903E9BA6F610A23BCC07
2E9C53D73FA810FEA785A9C4FDD5C55FBD91EC9F32B6CFDE9AB8CA88F517D1B7
8F3CE70791F59ACE09BF60B30E6AA128623FD1E621555BBC1C186C768D41024E
E44A6A95CF1AF3563F5C7D6899E772E4DA86643851F727589EDD879113340CD4
ABF002BE34DD0D0DFB362690DCB61E6CE877B3D3F11B3A422CDB81B918A5A4B7
AB4BED1DBF20D11FADF4459759CB7367E204F3380D024322EF91ACFB46850B09
23A3B18DB3CD31E5A0A9FF2EA12AA9486F424AA9A438B9F56741C05596B4C4DA
0FE38CDF22E970150BC33B242AAFEBC27AACFF7FE88EB273BBCF59D252D989A2
4940D0BBAD73689B2120B7C7B22521E10234E464501E9ACADEF1BE24AF363C85
92CD60AFE0F274E93EF0883250C9F4F4463F5A1194EED1664875544BABE2DF96
3014F209534C6B5B187D07A41FF649BFC35B3C6F9BFD07D72BCB995B7C44098B
17FE9E718D6EA0D336E9EC8C892CE35AFBC1802B0C648C19B311790E5F57BD5E
CC7596F4E109347F4C5782F4EBB0AE4F4537F6A9FCA393BCAB15F4649B28E6C2
0D894940B679FF88AEC2D25440A3B506FC606283C70AA8C5504D49FF7A745FDA
A5B1B2E2E907AA9839404AC5CDCD33DE33528CD57C5D24114F002A08F76D7776
490FCC0EBA8D1CC6E8370AA99FEDD2330B0EADB1072438601D2577550B8297D3
92431F6A0BE60F38ED55E0922E0A9CFC8E68D64D0E3D456A0ECD971B2E20D1E3
EBAB32DC4975A0211C3B5DB0BFF312A2F16A06F9C70954212ADF89CE216F330C
160F73EE6D1E08A7857EDFF653910D209B736CB70B0C0497362B67A8E0F3A722
D10F1A3CB79203E71AEF01C72FCE23A796C84B5532987A08EC03D751AFEF16AD
A0C91E110D25B3BB5E3AEF6D3A8DCD7BFCD5C4DE5B064173B8CBA9D23E50E065
EEF0421B33B6619A8CAB21AC6A219A1ACE541BD9202F8CA887F81F61B64F1A95
00AD3D4CEA1643915B3CB8383238ADC91A38BCD92B1061DA6CD08794DBB6B38E
4FB6952ED0B3A5B282BFA9EADBAD6D726799FB15D740B989994A58E84446DFAE
D8B923DEE22ED13C04834BDD8D7AE14D82B6CC12E55FB0A729D10889089355E3
2F6B9ACD9CAA37CF2D70FE897795D0F1FC71ACF6BBAE6E9DC6F11713A55673A8
985CD02F486D8A9F6740BBE8B4ED9E7DF53F40A9325417E5DADCCB61F2915F5C
AFB3DF0B864870D1A45DF76FABE033D7BF293549890763F1CAE3FA3F37F9A9B4
010126C546E3B4B35C090CAB94B4A0DD2E494382EAD41E963C93AE5F9D455710
F9081C425E8BCE7C8DF272AE9751EF1856E0ED0BEFDF8B43538EBA6067EDAA57
0F1676F8C92BE61392C2BC0AAB770FEEBB40651848E473836D6ECD420E0CD50D
4452B395FA1D45A183D6130752DC1C05DDCA49872283AFAE046DE689CDD243CF
61385BF7CEC042F47A59D27D80FB7DADE1C03F0EDF8168BCE9958D3B44FD0910
40CD1CCD7EE8E5EF25028B4C418FD2CB965E78D222BCB1E57BD2A15861286FDE
433F09BC9CCB0A06784F91CF2BCD761F03CEEA4EBA397C1D427C7311776586BE
F82E13BC306E43E0F72EF4C13C0742E2BD62609CEEF5AAD0666F52126FAFBE8C
F0D72B946EC37FAFE8EDCBF4A2B6CB0DA39D107A053BECAEF7AAC2B3E88E21EB
4D0BC8A30315A90B43340A6B0BD5196B2D71B125B47CE028188203DFE21AF0CA
BC4327AF2EE98F6E98883789CF2DC61CD2DA72F7B45E472C70F4EE159FF66151
5C2AE4B4313CB6C042A664D6743348B6411F1850F256CC99269EB5A37F3D5ED2
27B0085FE85BFF5DB2280C5EF8FC39458810EA5FE8248B412A0EE16B3F733A14
58C8C8B8F11C9957C07A32AD3D9FDDBA48BBC28DBAD26B2FFF25FB7DD6DA10C7
DEE0D223FF24AB9771D671BEEB6AB692CB954B39A15DB170E2ECACA72F68D795
150667439806E54C5A3E4EFAE3C7AD47AE55FF3DF6D6977FE411FC6FDA0D21B1
4A3B1262A1A1EE9256410A727E47F1E3630033691E0C011827EBE194C4E3BCDA
A2DE5E54C6A9191E872218D49464DB8F2E14E013893F2E4FE96770A93B15BC89
89D3C1C5897F5741E49879EADF4D9446861BFEAD1319587E2F56620222DE937A
68EC12F185BEE5A80D03DEDC7DF79F69DF59296F4088A96F975BB8FDF96A8B62
5962A32736DF6A8AA7CFFCBD33D446022A4F9B9A6D4CF07BD04A122F996C82C6
B413FAD1519D3E0B373882B42A9C389FE034389791973A85A2B7CB0B386B4035
0B1D5690CBB22CA89AD906182912B13EE86BECB28EF0057B18773FEDC5A695ED
B4F5AAE93C424CDFF3F7E7413FD8B5EFB89678A00F10D398B56AAC6DBFE10D52
F5A3368E040983ED6B306BEAE0959127A0544330DA0FD277D46D85451186914D
77A711497CFBDE56462602BD11098DF589F3485090A34532FC19FD432F12AFEF
4388A556C0B09EF4F7070D60E3EF0328F21E4EC0FF4F3E9E57998BE8B265A618
9AC217A6803AC09DDF380E965F61917B6E4487712A1078D62A72C02B28CF2B6F
D901B32B9D7DD8EB2A263B6CD51FA7DAF1461700C267C68AFAB7D62AF8869F96
41D6F32712618C57510A1CE2C6547E97E420F340BA378C342E820E3938912CB0
20FA3F8B0AF58FE96165C650E4B0A9F4BF7E45ADB558E25AE6F598C05E1D05E8
B8C1EFF89F0863DEC9250C603439E0AD435A83A84EC0E982503F93D38A8D8BDA
49A39D7757309DD960441E30183651EEA18E0570A36DAC795F3F733768AF9575
AAAFC39E7F9D9E9EF0661854A70EAA44B2563265CB744A51A663120FB636C40F
E69E42A0C4EF6AC6C062C444EABB6433679F713CF2F2BE83A0B5EB3348B1497F
6B1EB0136CC17E2081211722E4F8E5F30FAA06BB9A3401F6C6480EBB656D957D
22DEE76163B2E37E7CD8F1556FB015C13E0FD9BDEBB39EE0C4A5291C7AECCBA9
ABE70438CEC515FCAFC1230128639A86DC64120033F0A36BC0D53DCFDCBC3FD7
5C52A32D0D3E7507AAF3BB319C5A556E3A502845D136F155C0B0F71CDB776770
AD1301BAAE735C49B0205C13F7D2F1D15052FC14FFF72A016D8C2E35BC7D7FAC
12FC896429AEEF8BE7AD0D328EBF58524BDDD760339B839947E1E27B9582ED27
4BDB93B8B2E43AFEF87917829174B68BE4E1718A0BF2C338A760AFE0B14A3CF6
61F80BD3100C89096AD36CEC70ABF48F3D41E6E3BE81E2F56591E2507D2ECDB5
236B4CD25E4A1DEC73A6D9E21143102D43D697AEF20926B86524BB3E64BF3B3B
6EC4B9E28CBCA2E333629E49BD7743877902004713A3614FBC49B39CFD2350CC
35A5435E9CFF5DF500293B91F23AE83D52B32C6858F03B3377606FC5EB85B2F6
EFED818AB4B991D2974B4CAFF9BCE9F35E6837695F21ABCD04B21885FC4914A6
EBA67266000D88251B693770C6CD416534184456937DEB1F8271FD5212EA5C1B
D3A80BDEF0F06765441FCE7E31FCA2FDFD4AF5AA6E0F0CB3F88E2D696E166906
E4100B26123CD969F7A93C80D6C1CDA3BBBB37479E58ED46D1AD49765E2D9D17
25686D0E519AF1010F89FF83FE36E5836BA33B1FF90F2E7171D45C481002D19B
F700BB2F4CD5FB99618F5001DEFEEC670606D1ACE94DC0926A4AA8F40C322B04
AA4C0C7C47990F57467E3ED98EC2546EC8C9140BFAB47BDD25DE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR7
%!PS-AdobeFont-1.0: CMR7 003.002
%%Title: CMR7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR7 known{/CMR7 findfont dup/UniqueID known{dup
/UniqueID get 5000790 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR7 def
/FontBBox {-27 -250 1122 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR7.) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB981ABA2ACC9A23A5
3E152596AF52983541F86D859FC064A0E3D5FC6647C3CAB83AD4F31DDA35019C
CDB9E3DD3FEBD4C2B36BA3CF6E6C7DA85E25D8A31A9BAD39BDF31FD0D1790707
9DE6A078E8A409D8295F642DF492AC4F86AC84383B0F4C6BAA7C22AD5A898A71
D6CB34D2CD12266C486B75E75A69C14819DD9BB8159088E04D4717E576B8482D
BDA52110AC8B8A80E4E9D58F470EEBD3CF44A1E1EE8DA318FFF3611B02534FC9
F4018C7C57E80570D2F634D98BE5D5EC6D95051157F0EA94A3D12BE0B4B79939
F82F8D73136D3337C44E314B0B16CB030D9A12E01FB667105F334C3EE965E5A3
D410D2F1531547A4497C355AEEB295CD3C5334BEE5232992960B757594B89F3E
52095042DBE6B4DA3C3AD50CA95EA9EBADA10630B500CF1FCCA7D60306743681
7E428D33B7F7C40B425CD58E4CD8AB474BCE6A307BC6C6EBC15A8A96E0E2977E
A33389154536F5C5D8CF036D07F24094E779E5ACBE5502C92892F10F4C6DB627
C7EC4C7BF20B39418A8A85D7FD9B0EAAFD871DDD41F93BDE5FE619AFB8711824
DE890E62C1969A6FE28DD3578AF43D58A728FAFF0B9FAA640962C8F35A26F76C
67F3548D6DB54A25CEB368B47F97EA2B0C4D7C0E7894A4F0C823C6C1922CF9DC
10E05600556F1C7C9AFB33A2DB6F8730F70D6BF94B1FB0887451F2FFEEF3584F
DFADCFA9A2D4846B8F0E51620E1327D994CDF973B837D10C90FF76DE22B47CD5
EE3183898D156861AB4DFAD34A1E3FA260B8164E6680BF58413A553E88F6100B
C4F4E8E972C81A5F88A7DBCDC308B4C3581BCDE13877B976B1F84330839FE5CF
C78551620EB803DF94A5C921F8EE24F7EF8FC4C3E1653514212631F54F90E3DC
E9EAF96E998F340C4F729ECF7AB430FDB7C0BE3DF2C0D23015820E28B743CAD7
7F0AE95413C3EEABBC69E852F53EE1DC260D7F1E712BECEF2F18437DB23D8E74
2902AAFBC733AC5BAA452DD6F3671859AD836C8564E99CDC4183D8495AFD99D6
1F0D65B6588CE7546717911E25BDCA6C2649E3A7466A3E2DA7C7994A30AB4449
672EFD00632EFA8629C1AFB7D53D801028F77C864869FE636213A69173003EA6
BE1ABA95EB07B13D1594BEFCC95ECB0A9CFA9892EE0677D6B6C250855762B7A7
8E4E022640F93169DFA0303A0D5E73BF3E0F4D4AAD10FD7E4EB20532BA30371F
E9F480F9513432946F9828AFB5D4AEAFA5829B2CB544E5EB634C4537EF7DF08A
A1CFD94A52DCF0E7CE4C5EFFB01E6D50558B75DB4C8D5512B06080F27BE62E01
2EEA6A0357441401458C842D3DD4C35B8F561D816B336216CE0C14BF77648AF5
E33912CF95872A1E1AB9A18980A0B29A881D13397C15E1CBA5D3E0B27943EBE2
F3003D15EB446BCFC1C231832475D5B7AA19E4CFDE119D6CD62D053C6D29C333
5F729791D17B3F7108074EEF4D1BD101CB33E01004532CB0D716D2E54D169C6E
80163E70C0E9081F31A1ECBAE079D2A518B790B0CB2CD03DFD034A0F4788E800
B0CD2DC1FAFDD487C2F381EBAB2A2F3F3AF82021B211DC9CD2FBA6A1BB3D4AEA
4C7F3D9A5C21DFF284CCB827D205A69638E98D5DD8E36AFC1A4481B5CB2A2E8F
D6C838DA6F81990F5ED928DC7457501B5C979FF4CD20A830896A460C5DB13D56
A3B2B5D9B292374A9BF392894DD99FCD6A1E655AB395E839F074D1596488700C
4E2891C8AEEF66568E82A8B826F9A28FF84D4D9BDA21F638EAF96880B4EBE0D8
081982F34831A03BEE81FC177700C2360D2A48915EC40D5FE85B400E175D5AF1
067FA0097904FB647757BB44B4042D30D1557BD0F7922D731142FD682139CEB7
58CA4C8C240A0B86B1888CACC507E24E04020BF1882BD9B4CAECFA97DB24D7F5
AD64C69454027F198BA35881B94EE9159A2D73E450C3BDAED66B886D6DEBC84B
653E165176228F88993F12A170775A8D7038BDF2FE8DC1F7B98BDC02D1E6686E
9B834F6C0AD90780B17DFE25F0A4E470CBA84E73F2D22BEE09A040F14CFA2C14
0FDA5A5149B5FAFFE49F55EEFC43831BC43A8326FEE9C7F469C0FC3B000884FA
41DA7318EB57262CB96FC4EC7F16CA07FE1C3BE8C2DBC8A8135953D6DDF20BDF
75A2B6D26074FCE752BD32FB9F5CA797775E8DB9BB9786B469A3CD65A0D9DDDA
C2A166E454A94860EEF5B5C12172DDFC576A03F6E6F8A735FF21A3E9CCB4CAA1
3064893487697986A42CB5888B2B0A79FA3C74E8187BDDF7BEAB884B70B8D4AA
AC6615745AEB906E08BF831CFDE222F58D02B428D55E9D5A3CDE74E42D8A2CB7
E1A3A9439B678AD438793ABBEB72B21C58981DAF3EDCE4BB93D95F4A1E943BBC
B3A012DE92FED4F232A3A7D60CE60B605151F9C7C18A5C653E5D6D15E5B49A63
73E7A339504D0ACC74B8B116EA88C3EBA2CC631AAB29F761E5F062966AD2FD28
7FFE52FA8A115DBE23E471094FFB3CBAFBDF11B7E9058313F2D069B2CE98A962
64645738F02A31E2F2AC11628724034ADBCEE012721EBF0A567893411F950410
B20754A7510D041FFA6144AC9CC46D846B82581F20BBD001D34D9764010824BE
61C30D05E5C5D100A24F1917F01799CF5BC4E50FCECFEA732CB50196825F0E08
8A1EC868C6D4357857EE2957E081A0E4372E31A8ABEF23C3F2EA0FEE57DE4D08
61C570175C41AA0C7A3A579ADF593F18B4AE3782D2552E4E0759C32E059EE741
2D8191E381731769F6648B3581CAF11DAE46471896666F18F02918B0860BDA3C
BD5DE777672447C23C62ACFC2611ED5239D6A266FDA6031EBC5A530C1A2FF7A6
B4380B9A4C877267854AD1F1677CB5433F28894ADF93D39EAB94541A8D232E08
22D082D0951A60F62B87DC028714EC74133A4D65F7D0D1296C0E189C4A42AA98
28E8AE7ECBB9FC8DFABCC6EEB1E9FB06227F90808EF31331CCC5D4C9A6182181
047902DC9FD0444FB94B60FC74F3B677758088CE6A159D940C5CF682335E756A
8BACF06AD7225D49B0002392C889B0FE2C71311D2596F4903D12FA20BA2FFE25
A0804B4BC282929BE31E0F46B34532CB5795A65218CFAE21F390792DA67775C7
B91A2BF4C16DE4F6551DAE3A5827F616BE9040EE6B1008DA2F99A01EF66D697A
6CD1A44E0A15D1F39EA8025E886A68A1E9C334327C7703EE721E497CA924AC90
7723106D913C5ED4BA4FC743CEA8D0F5172526107DA65775C0B1B77179D336C2
9B09B608D80B1A1E87CA1A84A833A00D980D919BFF56F6390E9D5B45E9935CF5
E69D003564462F750F7DCE02DC23CC215A0696B74D8BD3156A392A94F557655E
00BFAA035647568ED66157FACC585E411F7F428569C147DC43F6E4FDE693D0F3
9917BEFEDF61FB980B85515FF6424824E2D995B05CA1E5D3E8BD8D3281DB7CE4
E54923E84058FFC0A8A2C491327D0F87CE4C352B724167CEE224DABA3B95757E
4A419594BE4F92E78BA6D35D4C93D31ECC3134B24A45DC32445725BB044F09A3
AA8C31EFC0A2944ACE2F2CE054CF24DB350FB3C71115518C24BDC0F7E54250AF
9D3378D38480E1CB9029F31570C619A28F065CA4FED5665EDB96712ABEB33B9B
4232C00C1B0215F08D53F7E430887035AC25BEAF06942FD1B6C442253C887AB7
D694C1A6115C8990B4CAF1E81DD1FDDD6B03C00055BE956BE7FD8A4E1049AE69
EDA8593CBA8C4A41E046C689FBBF9F1B64E5856A7FB1C61EC815A56DE2A8ED33
41F370B8203D4E5B19C63AE9E6E0D26F4F3814B5AF48AD30EC9B8402C941FDD9
722FCAFC638FBB835F83DC77F93D367266FA7DFFFCB567EF82B1695AB4D94D09
B18AC041811027229DF431F5CB2BBF6ACCE9D500C8F075A74590641C1A607C56
D2B8624797BCD9C91C3177818691FBB4744EDB6056464A0B95B8D63F7C22309B
82D6126E2057BCC9FE5566D96B7A9B201A09B0D3252A5494C8CA2C8BA8A13C29
37EF2A882D61DA708C279F663D88A8E2999A0F3B6F98C49901A7631BF7708B67
54D0B4C52BF4BE0DA0439E6763A7C9D639AD4092E77B13D3510DAE1475C978AC
796F9B2AAD3BFF35C5A3E19B5E2BF704B3BBDF68CE48BA4FA2496D60E58888EA
28AE12D00E9F0816FAC190590A865BB58569A91BF0345D01230ABA361442006D
BA2C90EC2036BBAB79EBAFC3F217DBD5854C519235F9627A1C3C71D21ED38AEF
0BB40F3B86BB9F09A3F309473D8757AB7E638DC1C59A7F9BCD49DE4107A2E54F
422767FB94048987847205584309397F554744690ACFFDF5902FE5DB355930B8
71863217830DD7A563B0B3A4025ACE75B0E777B4414B62A13B50C54E0E6D47E9
D43BF769B9411B74E1069BF71BA873B4B8973EC9BA492A5DEA58D267872BB246
10AA67B143D0E2223FFB4991E583E629413CC894C3FA4869B72D19CE1A0CEC8C
0FF5E5A3EC1FCB7D3C4289813F0D249A11B55104BD60B2A89BEF44CC77CCDA9A
065B8B83B4F4253AA1D535290DCFAA4773452D110D2B3370F9E2FE5432B54A9E
644EB3BA9BFF62347F376839024CD5EF3C5DFD30F412DD5474B7933E6A1AB63B
4B12F2417C72D0543C26A263AEA53E5BAEBD67E23553A72E949DEC556BEB5D09
C4D7A89B14FE4EC68D0E3E9D65A64B285E53590F418EDA8175113CA375A29930
DDCF4C71ABB26CEB800C2C2B253AC1F53651C88A56ABE5A74F3B54CB4FFDDB92
60AD7272BA25EC2F6FB759AA6E1E7964FB55AD09F4EB25DE45FD01833947BD05
6266AA8ABB7DD792941C7A070FCF3A4636FBF8921C70298D42FE92F079DBA2AD
6149D9CF9EF7264DE6DFCD4429949B15EA90B596340713BD61926DDB2BB23BE8
F9DE38A31620A817420A245946E551463960A8C5C7295E3B3D6A59BCDF5E472A
40B7A2CDDAA43CD8AAFC411D037142579D11054A903E102DF0D0C7B5BB854DBA
F3F086AF991F7F5D5C730F8F9AF213F25786F3EC0E54530FF912F4876FDE16B6
A07D0DC4FC46EC6363BCB68B83ACC448B801EC43FDD2F8BE0E93D809FF81E38E
176AE17C67C85FEA58EC95435434C49A950AA955D8B20989C550AB1F1C31B7FF
99422E1F48FB7D6F327C6DBC4695A03903DB275B94CB39386E46579271870A25
21823E75C377E9D5B46655E8CD8F986372CF8BA846423E26582315A9D19E0BF5
305C32B2A0EAC3ECB275B1D8BE11A37ADF524944219D94EA2C5DBDA768828B6D
775DA8CDB09E0570E4ADDF462EFD8D3FA3F86B1DEECDFFB699AF6507257C1879
16FC615868C2D51F03CD57BA38D42995D9164B257441210084DC409B6EE4C119
0B2E17B0A8D5326DD0010E4A325D5F77BF935693BC90A00A28C7B5F74817DA39
F47A41E32F4F92AA04D30D810F7B1484EB53AD8CFC8CE8928B570314E0F713F8
AF127227190F9C16BB73D2A217FF801C391A29095DA5E4974D137A0CAA7DE702
E20DD4755B1D78739756A5E7EC3542B96AD6844199FFA2F5F2E9C64E2DA4FB2A
ED79869F745C59D235438251BC2E6D26112AAED20E06021D1AB896EE1F1DD2EB
437FBD4A25E42245C5A647493FCC9922E6DD7AF57D5D482921D1CBD6F0F02949
C27777144751C1E72F4EE2BC343D4AE7A8A8758123B54FB1A026144C643651EF
0907A376945E19A8FC7F98A034832A5820A481B0823F980F59623E0511593FEA
BDE6EFBCC0383242CBD4954027B075B21F10472059A480D6E5ED01C3B07461CE
9810251A5C5643EC7403130C2246E8616CEA25EAC7A0076731FEA8CC43BCE3BE
933FCE61067F5FD402E67E2B9DAD954AA77C5BC86BC5E4BCE2ED676D8D8EC7D0
ABC5C86D82180B9D5D7451C71B5149B6B67883578DE9909317928C0A92E3205E
F23015400A1763A6FBF67FDE3318AD2696685A1832FC31CF38589EBC7CA1C818
60D2B2211E04EFCCEA88D9A9082E82951EEB123924A267CB03C48889032F2892
4227E217FA28F87E01CBF27BF1EA60641A4238258CB7AA355908FE36D90F5CAD
FE992D03A33E47CA9AEBEFDA57793F39DC6A9E85D5B289F6B862B35DBCF82E43
5CD6A862F6FFAC36478C384C3BDB0148CB1FEDF55969C776E77917635B5A65EB
F2AD351D21CD3822D43289FE8EB0FED58182997097C7E9F4373553AE1CA92083
EDE3BBE6C3BC7009D15AB5FEC6A59E9FD1BCC7B2099CA15FEF083B9CBF7B890E
CDDDE6BA0AFF306C76500C945DC91BD533FF9A585CEEDEF79238C54E6168001E
26FEB29E523EE501BFA4F60B782B1499B07084C35A2434B4D29D3D8E2C8F945F
A9922443B68D07DF7EAA1F4CDEFFC438B597D8943E231B5216808A85F30EDC81
9DF5DD22F54A45335B4C2203887475F39D247F0E7347BACFEAF220ED82F9263A
6488E73C1910023E505FDEB143006C1A351D441AC57F9D52D2C6D63D78C75605
999885676BBBAD56074298E0BFDACBA1830BA58E87F436CC670EE8EB1870154D
72DDBBF3794F8CAAA3F1E11DE29752DD99EAC695838A19BB67A1FA3829B6E0BC
5301610A0351AAA749F456AE31ADD87D6ABADCDD1FB3CE81C3713F48780DF407
530CB284B2AC709F52EE7AD647DEF9FA4D2A867CCEF728F3D40CF34C28D21527
10160B3DAFB5FE16AFC9D36C6EC4021FC189005862082BEA60AC72B63AD27D72
FAF3C2D89DA2648FC4C65104A069212D87144E8533CD86A6D73DC7CD9DBA25CE
7DA53B000266F3871B24663C77723703315C5E4A89DFCDBAB384AE7EB2F455AE
AB191FED406F7F6EC9E5B8276EF5C4CBA041AC7E8BCEC7CAE840154BDCA3232F
15711ABD1E867A434E9787CA0A6D1F197597DA27ED2402CB2D84ED082E8D3A39
81E6EB270DCA4E7A90E2BEBD3CBB3A2BE3CAB926192D7292CC16845B6399A543
BCFD224BB52F21352732DB5154FA3442733066CDC3E186D8AA97CD801DFBE43A
116C86889BE198DA88CA978B8C40ACB67E8F7BA499DE68A6FF0DC72C3D00BA1A
B378B39610F15CA026F95ED8155CE3FFFFA2E2FEB352DBE14CEE1669F2387B70
55B91185FBBED764266215D518716EDA3DFC9E5DB6B148A553E75AE5E38E1CFC
6EF47B314D54CF24BC13856F4F7C976BB91D143DE32FF49BFFC87E17885A1893
BA1B8E441B08EFC04F7D103C1FFBB665194B3D0920473740C55FB1C50EBCF717
A2359B687FCEAD65616EE89A68F8D91AFACAA0B238EE4AF0279AF5BE5294C3DE
A7E1F5E6248C0210E7D40683F04B12A933C746ECB517CF94BBCC6E4CF49AC715
D8005AFECBDFB7A6B417DB8A28F8E9EAF39CEC1CA64DF37A5E66A76C26F721F8
A63B003A040A62F87DCF61B298F960D510BEFA453F118E59E7DE8CA3DD002EF0
127EAF733D5C61B5132348D280F84D159809CC71A3C6F7373BBFD8D6EF715D34
0016DEFF14AA5F960BF1BB9AC304A1823722843547BB4CA5EA4C41C6C2701C8F
7BDC810443F9DF34BA469A3260009B799871BAF8523C8763544DCD0B382D44C5
F75046AFF85F0B5A3188C2EE786CEEE5496A5AF4BCB0B429CAFC403FB983EFE3
61FD9F52ADFC38E07A0FD7BACBA530D2E4DAB2592AA9564843E7E2305047F060
C5FE4243FA8FDF1B5D4F61ACA7850A604FBC6D6970959752695C90F78961B4E2
C8CFA41082B1A37405AABCEE5BA3DC2B9EA76F486117B84728EC6D8AE6379CCB
402C2AA89078EC992C00D53151E9D82C65643F549A572A20F05107A41BE5AC57
8EDE92AE20B05E2D0C98151CC92D5389A675DFE39DF546A33A84A4C534337ADE
B17C34E09145B37CE1EB1D10D42CC8D6E6B127A3809F7202381FDB88D42084CD
0AEAEB8A8288CB56870EA2BE9D0B9DC8291021CA561E2BA388DA3494E433E0EE
5E69DA51D0AC505C9F71562D3E9750F23CF14D2C8ECF0692FBBCB4A92B48B4B0
AA2163A00DE74E4990135B9FCF930B9549CFAA482EEA3C612BF66FF5E4C2F6A0
304CC43B7F56F6DF973313CA7F2D88D302245F7E76FA135E6117720C4A8B1DA1
D96939FEC52F91FBD8A43CE01A409F0F69AC3680957CA87A11C698B9776B6AAC
AD3BD33DE9ECAC8C5F45C1543307B5F7DB4843FDA77BDD20AC8BFEA0C50552DC
B5A315EE27CFD8827E06B8BFCEDCB21F577C2F98765A250D47007DE10F612115
F1B7F5BD1FB5B5C7559C7223C22EB80C462D64503B8401A14DDD81FF191F0356
40EF885679B521B76117B2792AE1CCFDFFDA1ED8F34242D4167552D4AAFA137E
9F7AC12E0CBF6D5FA8903BFA43F47098276538E94290D04E744F97B9AFAA138F
6ED0F8A363A75940940BCC2559C9FB1A2B5A78470FF6714ED29F5AB1D3D809BB
F5433C3456594E0E763F09C4AFA698F87D8329A754C766642BDE082D84318EF8
C69E46AF9937B76AD069B7A94A2EBA1C3DAAA9B441F5418A96174CD8E512F168
38FB818435EA45F5D12E235B7DA19BF89D1010D80439FDE2068615A07BAFB584
AE787A4BF35F7E9FB22225301877C43DD1CCDCD59AE88C932FBC5A9A807647F5
499483B36D867C96AB8B2E4A79D4C7B3B18E45A508435AD4AC4B714A019FC268
1CC2FE6D244C74E04CD650334BEAD3870305C2E64D90F3AE6FB837E5B9D0373E
7583F005CA78115EE6BADFE86406C01200A41BA703B37E6651ADEFCFF686657B
C41FCD1267391E12D7309D4577369160CA47D16346DA18509508FAD6CC4BE741
2B1440363DDFCC96C929F555875CE8F81AD4AB1F6C1BF62C35848304E0BD2B64
E5DF16334B1EAAE1496E69E9EB591A0C3AAE949CC55519F96B1B3D8D4DEC2282
132B3F58CF223AE904DDDB29A23B7B34747864BD3DB598248913E75D41B3029C
853C71B35A28FFB385051B0C8AB745B189FC6CAABA249CD1248F911CBA38E9E3
3FDBABF9C626C99F724461C6EA55984565CCA8CB5233501520DD2D2A674B8354
7C8DC2BF2D633DD92D6C91D6EDDB968DA3C45563FA2D2B21240AC2D30AA7FDF2
9CE9CBE79211C8F91816FD3E182A4694BED8738648ABC6D6DCFDC873525DD6A8
0AC00CD1922C301EDD96786DE4E11D29949DB4C1EDC06358F3FF444250709EAD
2B2763D9AD0A65FD9EF0CEFDD4B7B6CF3B1B55231ECFE4E80966BBE5BCD683A8
487BF1E5B348AFE83AD34C61EEA243957B646F3CD1E8D55FF37F42DE93678E01
2B6E53A69085B0E63B945F6F548355CE7CE3E4D66FDA6BD49694B7A2A7614B3A
053654020BEA852CAF6897483550CDF2AEBA62BDE801C43668041DD42C81BDE1
D31D7D1D513D969F79DCF1E4F46B98DAC923BA35A30A3665A1DA536B8FD603EE
D230F6520C8B9197EE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 28 /tau put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D916672480464F7E22
CA6E431FE38D3FC019BDD229E064B72C545C61C6EA55984565CCA88ACB01F744
3B4593CC894009AAE9A490E3B99E03E117A041A381B8DACFFF20F6E5F293B58B
0FAA86F132B8B59D102722B3E98E12F11EBC101AAE666271C93B6F7CF1AFE94B
5826703D754B09055EBE0A53E46EF9829C7181974A374E6AD658B17D89EB88D1
A80EF734BE6F686CCA917AA3AEF80A216B5E13C3626F2BE0093D2826CE4B3C25
90E3189335FC4F3BDAA0F15652CF8B32364DEE4C7FE174CA2219BF865BE7DB62
490D6C0BE2B1D2B889C0E1DAE9FC29B43AAA9C6A111C603B0ACF2AC6A7223A8A
3F13D96291D22B09F4D89777
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: NimbusSanL-Regu
%!PS-AdobeFont-1.0: NimbusSanL-Regu 1.05a
%%Title: NimbusSanL-Regu
%%CreationDate: Thu Mar 20 10:08:51 2003
%%Creator: Primoz Peterlin
%%DocumentSuppliedResources: font NimbusSanL-Regu
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
%%EndComments
FontDirectory/NimbusSanL-Regu known{/NimbusSanL-Regu findfont dup/UniqueID known{dup
/UniqueID get 5020902 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /NimbusSanL-Regu def
/FontBBox [-174 -285 1001 953 ]readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (1.05a) readonly def
/Notice (Copyright \050URW\051++,Copyright 1999 by \050URW\051++ Design & Development) readonly def
/FullName (Nimbus Sans L Regular) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -151 def
/UnderlineThickness 50 def
end readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE33C33655F6FF751F340A8D6C01E3
2E02C24E186BA91B34A1F538959D4450CB683EAE5B034D030186901B458D3777
6B3942BD2E07121385120248891AEC2EB33C4E3A0CF00828D0F130C31A918C18
979FE94379C648EF21ABF659253E43CD1253866F157F1DF85AE7E8714F061B1E
ABA3AD094FE8D6293916FA82EE4F486C7E513A06D4C9BE44306A8287970B4ABF
B6D1F9274A5A0BB6ECF713ADBD1260D5D6C4420D357FD486470A74B2F0621B59
A9373ABECDBF32FA68AABB66FAB0C970A3354A335D70DB2CC5A3208BB6D768E7
B58CD9BC2B6B7E110693C5A88D680B7290DB121996E3B7C8AE3C23147280F8BF
D8C60B415552700FF0E44C2257B467ADD5D550F61EC34A76143393E0B34D55C0
8B64B48E5F1FD16E16B967511AE15434B7F755BDF2574191E3C3DC528B69B5BA
7DDBBD3C7878FA69ADE75011A2C0F02F5707E86FA632D1269281D3C265B31F3B
F3145052467647AFE18B9D763FAEE4BA72CB9C385568EE5BBF5854C278F1E3CC
475C6234E83ED33345268BE52F0931B58F302EDA0D5751348E7B7E53D4882FB6
9343BDAAE87E48F6E82024D8EC1FACBBA36582092CCD76553B0449A5090774EA
7242123C53B80F2E927B98DF2B36C403D1FA1E9F8439F3964DC9F89A0CAB5AE2
C907309460F097AA87BD156575D6C73EDB2B40C015E67734397ED14395C43394
7A0201C6B0F652B035FD7BB82ED236D0F7C20048AFD83A56925C7A2898B46270
B440913E4714FD89697B3E59F5BDD5A2AACF6630257957ABE1A63502A3081B6E
307A534A9E238F986D4C866AFBAB7A0B1B5A6E99AA0A56DC1FD7E8A39CC45147
259AC7033A0C58192CA82FB12E09F309F75690043646193AD92D2368F345771F
01CFD21236BA52F74E36CF4B94259CDBA2EF1D61AD93A2B942A9896B0819D20C
59E440851CB99E89C887FC62FD9E7F88F54E5BC157D81A5FBC70699820C51BC6
27D7755B195C0BAD8225A6F3EAE0A5A674E8AF6B11BCC69DCF5FB89D8BE0E2E5
FE7E2588F93F583E4E2F6ED5457E90B902B02F51D54B9F0BA54291E687F4A7A2
08CA5FCE0C9F3B954247312EDA3C532D3DCDFDCB56FFE03B36DB7D549D4203C6
7DA8772A2F732A15DE675D3212C28DC755E3D0156A777BF514112ABBE4372ACB
97D7834813E1850F90CEE543B4C09BE1E93742EA98B8CACC09FCC4D2595EECD4
46C942EEA60211FA7DBC11CE869D55BF0C7EC6AA747EB2AE2CB3CC2DBEC936C9
540CE2E08291323B36F6549CDB97BBF9F0DA429CA9C863B629410885540DA6C4
9AAADB30C39051C993CB547BCD573D6448DC09BF7FF2D1B108ABEC2AAEE4060D
182ABDB3100AC627E5C883E8F42D90D699C8028D4123472F211C8FBB744D7E3D
C626ED03D8517D69E1ACD26BE4F83FAE31122294816736827D138E4F4CAB1681
236C1654E01231EA7F08AD0E73BBE1BE19A7AD6DA63AE0C7F5A360A53BB35268
CC90125C7545D9D59F5127F0AD964AA66DF020F639832FAF9C2CCA82C01120BA
6469960C350D3AF786666EC14158728E0BA2DD8A639C28E0A7EA8BBF608FD7DF
79C7B5DDEA05C8C3D6FC70177D1A9EA9AD056F0CE31AB535A22FF7EB33748073
CFFFB25D7C1188A40488A92FD2EA87A8A7DEEE9650149D167E131EBC361E6C92
2A9F532E6F7F85C21F704014374BDDEFB609E1EF72E87A7EA5AFDA938D6D0D86
F3813395B3523469EACBCE3AE0A271812228B8CF856DBF900704EB607E7A2698
08931B771ED1250E3866E88FC69A1214C724F830BDE997294721645F61FAB360
7C3B3F9EAA0BEA3074AD5A6EC578767BBE4F591737316A4F657DBDF2BDCB627D
C99B501F212C04DDCF148251E92337D102BDF46C4F598030F2E7121F6A610D64
0FC7E512A28BF6CA72CCEFB6270BE052F658087D5C67D702AEBF0B842B5B970C
C74AE8A08E28A3804934FFA3EF4A1695F578ED2A59D9EE46F33362634F975882
7B199FD078B14DAF0BFD6BD22B450926B69A090620505014FF932536CFEB7A1D
C6A7028A0ADDC43FA3076B2674E5A540B44DFFFCBF4181A86F0A4BD25C3921CD
2BA8360EFAB28614E343A4E9F8E511A3BE81417657DD2CD6783587B4DD60A9A3
E8FB1E85399BC5C251127B69C42697D8F40DE08234A7E36E96718669B1A78B7F
DC69C8BB5287F3D6EDAE7FAEE2F2A8043E9FE3DE20883AC911EB876DFB2E0C25
D8F805854E9147FE4001F1AD9BF7CB10080ABCF49DCAABA733F5985D8C87F648
4564372CC0E8DB1233ACF08D07C65F7177880587E359987313CF63EB9D3FFB26
35DD328BF8654E275440954271BCFA1AD9C73159AD6E68834E360B2E79C2752E
E1912426725A24ED006BDF5D6CE5AB4B33C724DB295EEB26F5E8DEE5B94BBF57
E976F21E87CF81405E816E296961D014627A537DFD9FCCE9470EDE21EF2BC98F
123E7D5EEEBBEF933766E3104B42792276E63BB928ED1CBBC6F5B9C32709F8FD
BDBD3EE782FA4FD49BE91395B290E712D52AFE53AECEC34E04717B87CAB6E46B
58686C8984A9BDD1DF3D9B95D34D66C279EE72E75EE44123FE1CD53846D377C4
B456779B914212E5CDCD937E40268DCB704A3B67740C9E3C2CC6E209ABE10DA3
B8F6F29D5766A482FDBFF248C0CC2C48F57E2E39E7AC729A06BC61C9997A1165
6C9EAED18B14F7C82465584E51EF9B79515FBEC893E422D4CDD23688F762757C
0FD23FFC5B86ECE49BEFE44719DC90D25B71C47A172339C61540B66090C3BC0E
BEC1EEFC57A8D71DC4B065208DD080EF2BE3CFDA357B67296B1BA24004B49936
7F9BFC51FA658C5D33EA1BAAE4AA60AAA99E4BA2EA2EB41D8C726413A1E42728
B458E05C389B2102D4F0F6063F518F4B3DAB019A4EEC3F455F8414F171FB64FE
95897FBEF48A1B122190FAD568373F9ED05AD04CC89027424F46C7B60B26E429
EEF27CB7BABD70314CE676E0681D2874A83C6197F9CD4976C1B5A53C281024E8
A6DA2B8F3FF6EA1FCA26D085B01DE0C280DDEAA649282074DFF0DE6585E5F1FD
7E876E744631E1089C770A0B56FFF2D9C43FF3E45F2EBF289E2457A3263C8905
B072F4CE5C89BEE7A792C6F1ED8796C43CDC7418ED1670BFDEFACAD0065F2693
9397F3A95D00F652B9610DD28D78E95C9C4375DA56CF82E97E8EBC912C08585E
1971325BF6F347400C9E57AD01C2DC6901C7A8626891881C4CB873FE3F09DFD6
5ED2B809288288F55B17581296567A79FBAC4AA439B97FD101F851FE199B9DA1
65EFF75330535CED6EB90E7C44F7E337B2010F8761FD84AE042C43D69E6A3026
7DBFE46592BB04903129D86C5EE37A1649CCC10C2DC42544ED16BF7A1E616392
A371A7209C437E858F3EBEDFEFFCBCCC73B2717B7753EFC26BA17D7909E4A963
7E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (preview.dvi)
@start /Fa 130[44 1[44 1[44 44 44 1[44 44 44 44 44 44
44 44 44 44 2[44 44 44 44 44 44 44 1[44 11[44 6[44 1[44
13[44 44 44 44 9[44 3[44 44 1[44 44 44 6[44 33[{}37 83.022
/CMTT10 rf /Fb 134[44 44 44 44 44 44 44 44 44 44 44 44
44 44 2[44 44 44 44 44 44 44 1[44 8[44 3[44 44 2[44 6[44
2[44 44 44 44 19[44 1[44 2[44 42[{}34 83.022 /CMITT10
rf /Fc 136[60 2[32 33 33 1[46 42 46 69 23 2[23 1[42 1[37
1[37 1[42 12[60 22[65 3[42 42 42 42 42 42 42 42 42 42
48[{}26 83.022 /CMR10 rf /Fd 202[33 33 33 33 33 49[{}5
58.1154 /CMR7 rf /Fe 227[36 28[{}1 83.022 /CMMI10 rf
/Ff 199[46 1[46 1[46 1[46 46 46 48[{ TeXBase1Encoding ReEncodeFont }6
83.022 /NimbusSanL-Regu rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
0 0 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 0 0 a 0 0 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 0 a 0 0 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 0 0 a 125 2411 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 17.08206 T 15 {
gsave  /ArrowA { moveto } def /ArrowB { } def  gsave 0.8 SLW 0.75 
setgray  /ArrowA { moveto } def /ArrowB { } def  [ 375.80544 17.08206
0.0 17.08206   /Lineto /lineto load def 0  setlinejoin false Line 
gsave 0.8 SLW 0.75  setgray  1. .setopacityalpha   0  setlinejoin 0
 setlinecap stroke  grestore grestore grestore 0.0 17.08206 T } repeat
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  17.08206 0.0 T 21 {
gsave  /ArrowA { moveto } def /ArrowB { } def  gsave 0.8 SLW 0.75 
setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0.0 290.39505 0.0
17.08206   /Lineto /lineto load def 0  setlinejoin false Line  gsave
0.8 SLW 0.75  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore grestore grestore 17.08206 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 0.0 17.08206 375.80544 290.39505 .5 Frame
 gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0 
setlinecap stroke  grestore end
 
@endspecial 125 2411 a
tx@Dict begin  gsave STV CP T /ps@refangle -90  def grestore  end
 125
2411 a 125 2411 a
tx@Dict begin { 17.08206 17.08206 } PutCoor PutBegin  end
 125 2411 a 102 2503 a Ff(0)125 2411
y
tx@Dict begin  PutEnd  end
 125 2411 a 125 2411 a
tx@Dict begin  gsave STV CP T /ps@refangle -90  def grestore  end
 125 2411 a 125 2411 a
tx@Dict begin { 51.24619 17.08206 } PutCoor PutBegin  end
 125 2411
a 102 2503 a Ff(2)125 2411 y
tx@Dict begin  PutEnd  end
 125 2411 a 125 2411 a
tx@Dict begin  gsave STV CP T /ps@refangle -90  def grestore  end
 125
2411 a 125 2411 a
tx@Dict begin { 85.41031 17.08206 } PutCoor PutBegin  end
 125 2411 a 102 2503 a Ff(4)125 2411
y
tx@Dict begin  PutEnd  end
 125 2411 a 125 2411 a
tx@Dict begin  gsave STV CP T /ps@refangle -90  def grestore  end
 125 2411 a 125 2411 a
tx@Dict begin { 119.57443 17.08206 } PutCoor PutBegin  end
 125 2411
a 102 2503 a Ff(6)125 2411 y
tx@Dict begin  PutEnd  end
 125 2411 a 125 2411 a
tx@Dict begin  gsave STV CP T /ps@refangle -90  def grestore  end
 125
2411 a 125 2411 a
tx@Dict begin { 153.73856 17.08206 } PutCoor PutBegin  end
 125 2411 a 102 2503 a Ff(8)125 2411
y
tx@Dict begin  PutEnd  end
 125 2411 a 125 2411 a
tx@Dict begin  gsave STV CP T /ps@refangle -90  def grestore  end
 125 2411 a 125 2411 a
tx@Dict begin { 187.90268 17.08206 } PutCoor PutBegin  end
 125 2411
a 79 2503 a Ff(10)125 2411 y
tx@Dict begin  PutEnd  end
 125 2411 a 125 2411 a
tx@Dict begin  gsave STV CP T /ps@refangle -90  def grestore  end
 125
2411 a 125 2411 a
tx@Dict begin { 222.0668 17.08206 } PutCoor PutBegin  end
 125 2411 a 79 2503 a Ff(12)125 2411
y
tx@Dict begin  PutEnd  end
 125 2411 a 125 2411 a
tx@Dict begin  gsave STV CP T /ps@refangle -90  def grestore  end
 125 2411 a 125 2411 a
tx@Dict begin { 256.23093 17.08206 } PutCoor PutBegin  end
 125 2411
a 79 2503 a Ff(14)125 2411 y
tx@Dict begin  PutEnd  end
 125 2411 a 125 2411 a
tx@Dict begin  gsave STV CP T /ps@refangle -90  def grestore  end
 125
2411 a 125 2411 a
tx@Dict begin { 290.39505 17.08206 } PutCoor PutBegin  end
 125 2411 a 79 2503 a Ff(16)125 2411
y
tx@Dict begin  PutEnd  end
 125 2411 a 125 2411 a
tx@Dict begin  gsave STV CP T /ps@refangle -90  def grestore  end
 125 2411 a 125 2411 a
tx@Dict begin { 324.55917 17.08206 } PutCoor PutBegin  end
 125 2411
a 79 2503 a Ff(18)125 2411 y
tx@Dict begin  PutEnd  end
 125 2411 a 125 2411 a
tx@Dict begin  gsave STV CP T /ps@refangle -90  def grestore  end
 125
2411 a 125 2411 a
tx@Dict begin { 358.7233 17.08206 } PutCoor PutBegin  end
 125 2411 a 79 2503 a Ff(20)125 2411
y
tx@Dict begin  PutEnd  end
 125 2411 a 125 2411 a
tx@Dict begin  gsave STV CP T /ps@refangle -90  def grestore  end
 125 2411 a 125 2411 a
tx@Dict begin { -17.08206 273.31299 } PutCoor PutBegin  end
 125 2411
a 102 2480 a Fe(\034)138 2492 y Fd(1)125 2411 y
tx@Dict begin  PutEnd  end
 125 2411
a 125 2411 a
tx@Dict begin  gsave STV CP T /ps@refangle -90  def grestore  end
 125 2411 a 125 2411 a
tx@Dict begin { -17.08206 222.0668 } PutCoor PutBegin  end
 125 2411 a 102 2480
a Fe(\034)138 2492 y Fd(2)125 2411 y
tx@Dict begin  PutEnd  end
 125 2411 a 125 2411
a
tx@Dict begin  gsave STV CP T /ps@refangle -90  def grestore  end
 125 2411 a 125 2411 a
tx@Dict begin { -17.08206 170.82062 } PutCoor PutBegin  end
 125 2411 a 102 2480 a Fe(\034)138
2492 y Fd(3)125 2411 y
tx@Dict begin  PutEnd  end
 125 2411 a 125 2411 a
tx@Dict begin  gsave STV CP T /ps@refangle -90  def grestore  end
 125 2411
a 125 2411 a
tx@Dict begin { -17.08206 119.57443 } PutCoor PutBegin  end
 125 2411 a 102 2480 a Fe(\034)138 2492 y
Fd(4)125 2411 y
tx@Dict begin  PutEnd  end
 125 2411 a 125 2411 a
tx@Dict begin  gsave STV CP T /ps@refangle -90  def grestore  end
 125 2411 a 125
2411 a
tx@Dict begin { -17.08206 68.32825 } PutCoor PutBegin  end
 125 2411 a 102 2480 a Fe(\034)138 2492 y Fd(5)125
2411 y
tx@Dict begin  PutEnd  end
 125 2411 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ 358.72337 34.16412 17.08206 34.16412   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ 358.72337 85.41031 17.08206 85.41031   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ 358.72337 136.6565 17.08206 136.6565   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ 358.72337 187.90268 17.08206 187.90268   /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ 358.72337 239.14886 17.08206 239.14886   /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ 17.08206 273.31299 17.08206 239.14886   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ 51.24619 222.0668 51.24619 187.90268   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ 85.41031 170.82062 85.41031 136.6565   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ 119.57443 119.57443 119.57443 85.41031   /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ 153.73856 68.32825 153.73856 34.16412   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 17.08206 239.14886 34.16412 256.23093
.5 Frame  gsave 0.5  setgray  1. .setopacityalpha  fill  grestore gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 125 2411 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 125
2411 a 125 2411 a
tx@Dict begin { 25.6231 239.14886 } PutCoor PutBegin  end
 125 2411 a 125 2411 a
tx@Dict begin  PutEnd  end
 125 2411 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 34.16412 239.14886 51.24619 256.23093
.5 Frame  gsave 0.5  setgray  1. .setopacityalpha  fill  grestore gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 125 2411 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 125 2411 a 125 2411
a
tx@Dict begin { 42.70515 239.14886 } PutCoor PutBegin  end
 125 2411 a 125 2411 a
tx@Dict begin  PutEnd  end
 125 2411 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 51.24619 239.14886 68.32825 256.23093
.5 Frame  gsave 0.5  setgray  1. .setopacityalpha  fill  grestore gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end


@endspecial 125 2411 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 125 2411 a 125 2411 a
tx@Dict begin { 59.78722 239.14886 } PutCoor PutBegin  end
 125 2411
a 125 2411 a
tx@Dict begin  PutEnd  end
 125 2411 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 68.32825 187.90268 85.41031 204.98474
.5 Frame  gsave 0.5  setgray  1. .setopacityalpha  fill  grestore gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
125 2411 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 125 2411 a 125 2411 a
tx@Dict begin { 76.86928 187.90268 } PutCoor PutBegin  end
 125 2411 a 125 2411
a
tx@Dict begin  PutEnd  end
 125 2411 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 85.41031 136.6565 102.49237 153.73856
.5 Frame  gsave 0.5  setgray  1. .setopacityalpha  fill  grestore gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 125
2411 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 125 2411 a 125 2411 a
tx@Dict begin { 93.95134 136.6565 } PutCoor PutBegin  end
 125 2411 a 125 2411 a
tx@Dict begin  PutEnd  end
 125
2411 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 102.49237 136.6565 119.57443 153.73856
.5 Frame  gsave 0.5  setgray  1. .setopacityalpha  fill  grestore gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 125 2411
a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 125 2411 a 125 2411 a
tx@Dict begin { 111.0334 136.6565 } PutCoor PutBegin  end
 125 2411 a 125 2411 a
tx@Dict begin  PutEnd  end
 125 2411
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 119.57443 136.6565 136.6565 153.73856
.5 Frame  gsave 0.5  setgray  1. .setopacityalpha  fill  grestore gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 125 2411 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 125
2411 a 125 2411 a
tx@Dict begin { 128.11546 136.6565 } PutCoor PutBegin  end
 125 2411 a 125 2411 a
tx@Dict begin  PutEnd  end
 125 2411 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 136.6565 136.6565 153.73856 153.73856
.5 Frame  gsave 0.5  setgray  1. .setopacityalpha  fill  grestore gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 125 2411 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 125 2411 a 125 2411
a
tx@Dict begin { 145.19753 136.6565 } PutCoor PutBegin  end
 125 2411 a 125 2411 a
tx@Dict begin  PutEnd  end
 125 2411 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 153.73856 34.16412 170.82062 51.24619
.5 Frame  gsave 0.5  setgray  1. .setopacityalpha  fill  grestore gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end


@endspecial 125 2411 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 125 2411 a 125 2411 a
tx@Dict begin { 162.27959 34.16412 } PutCoor PutBegin  end
 125 2411
a 125 2411 a
tx@Dict begin  PutEnd  end
 125 2411 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 170.82062 34.16412 187.90268 51.24619
.5 Frame  gsave 0.5  setgray  1. .setopacityalpha  fill  grestore gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
125 2411 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 125 2411 a 125 2411 a
tx@Dict begin { 179.36165 34.16412 } PutCoor PutBegin  end
 125 2411 a 125 2411
a
tx@Dict begin  PutEnd  end
 125 2411 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 187.90268 187.90268 204.98474 204.98474
.5 Frame  gsave 0.5  setgray  1. .setopacityalpha  fill  grestore gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 125
2411 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 125 2411 a 125 2411 a
tx@Dict begin { 196.44371 187.90268 } PutCoor PutBegin  end
 125 2411 a 125 2411 a
tx@Dict begin  PutEnd  end
 125
2411 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 204.98474 187.90268 222.0668 204.98474
.5 Frame  gsave 0.5  setgray  1. .setopacityalpha  fill  grestore gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 125 2411
a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 125 2411 a 125 2411 a
tx@Dict begin { 213.52577 187.90268 } PutCoor PutBegin  end
 125 2411 a 125 2411 a
tx@Dict begin  PutEnd  end
 125 2411
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 222.0668 187.90268 239.14886 204.98474
.5 Frame  gsave 0.5  setgray  1. .setopacityalpha  fill  grestore gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 125 2411 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 125
2411 a 125 2411 a
tx@Dict begin { 230.60783 187.90268 } PutCoor PutBegin  end
 125 2411 a 125 2411 a
tx@Dict begin  PutEnd  end
 125 2411 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 239.14886 187.90268 256.23093 204.98474
.5 Frame  gsave 0.5  setgray  1. .setopacityalpha  fill  grestore gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 125 2411 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 125 2411 a 125 2411
a
tx@Dict begin { 247.6899 187.90268 } PutCoor PutBegin  end
 125 2411 a 125 2411 a
tx@Dict begin  PutEnd  end
 125 2411 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 256.23093 187.90268 273.31299 204.98474
.5 Frame  gsave 0.5  setgray  1. .setopacityalpha  fill  grestore gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end


@endspecial 125 2411 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 125 2411 a 125 2411 a
tx@Dict begin { 264.77196 187.90268 } PutCoor PutBegin  end
 125 2411
a 125 2411 a
tx@Dict begin  PutEnd  end
 125 2411 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 273.31299 85.41031 290.39505 102.49237
.5 Frame  gsave 0.5  setgray  1. .setopacityalpha  fill  grestore gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
125 2411 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 125 2411 a 125 2411 a
tx@Dict begin { 281.85402 85.41031 } PutCoor PutBegin  end
 125 2411 a 125 2411
a
tx@Dict begin  PutEnd  end
 125 2411 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 290.39505 85.41031 307.47711 102.49237
.5 Frame  gsave 0.5  setgray  1. .setopacityalpha  fill  grestore gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 125
2411 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 125 2411 a 125 2411 a
tx@Dict begin { 298.93608 85.41031 } PutCoor PutBegin  end
 125 2411 a 125 2411 a
tx@Dict begin  PutEnd  end
 125
2411 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 307.47711 85.41031 324.55917 102.49237
.5 Frame  gsave 0.5  setgray  1. .setopacityalpha  fill  grestore gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 125 2411
a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 125 2411 a 125 2411 a
tx@Dict begin { 316.01814 85.41031 } PutCoor PutBegin  end
 125 2411 a 125 2411 a
tx@Dict begin  PutEnd  end
 125 2411
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 324.55917 85.41031 341.64124 102.49237
.5 Frame  gsave 0.5  setgray  1. .setopacityalpha  fill  grestore gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 125 2411 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 125
2411 a 125 2411 a
tx@Dict begin { 333.1002 85.41031 } PutCoor PutBegin  end
 125 2411 a 125 2411 a
tx@Dict begin  PutEnd  end
 125 2411 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 341.64124 85.41031 358.7233 102.49237
.5 Frame  gsave 0.5  setgray  1. .setopacityalpha  fill  grestore gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 125 2411 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 125 2411 a 125 2411
a
tx@Dict begin { 350.18227 85.41031 } PutCoor PutBegin  end
 125 2411 a 125 2411 a
tx@Dict begin  PutEnd  end
 125 2411 a 0 2610 a Fc(T)-7 b(otal)27
b(completion)g(time)i(=)e(0)0 2710 y(T)-7 b(otal)27 b(w)n(aiting)g
(time)h(=)f(0)0 2809 y(T)-7 b(otal)27 b(resp)r(onse)g(time)h(=)f(0)p
76 3088 4 100 v 96 3088 V 0 3058 a(1)p 0.3 0 0.1 TeXcolorrgb
89 w Fb(/)6 b(*)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 63 w(-)h(-)p 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 11 w(S)h(c)g(h)g(e)g(d)g(u)g(l)g(e)g(r)p
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 61 w(s)e(r)g(t)g(f)p 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 13 w(-)j(-)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 62 w(*)d(/)p 0 TeXcolorgray
76 3188 V 96 3188 V 0 3158 a Fc(2)p 0 TeXcolorgray 90
w Fa(t)h(p)g(r)g(o)g(c)p 0 TeXcolorgray 63 w(*)p 0 TeXcolorgray
63 w(s)g(r)g(t)g(f)p 0 TeXcolorgray 9 w(\()p 0 TeXcolorgray
11 w(t)g(l)g(i)g(s)g(t)p 0 TeXcolorgray 64 w(*)p 0 TeXcolorgray
62 w(p)f(r)g(o)g(c)g(s)p 0 TeXcolorgray 15 w(,)p 0 TeXcolorgray
64 w(t)h(l)g(i)g(s)g(t)p 0 TeXcolorgray 63 w(*)p 0 TeXcolorgray
62 w(r)f(e)g(a)g(d)g(y)p 0 TeXcolorgray 16 w(,)p 0 0.4 0
TeXcolorrgb 64 w(i)h(n)g(t)p 0 TeXcolorgray 60 w(*)p
0 TeXcolorgray 63 w(d)g(e)g(l)g(t)g(a)p 0 TeXcolorgray
11 w(\))61 b({)p 76 3288 V 96 3288 V 0 3258 a Fc(3)p
0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
298 w Fb(/)6 b(*)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 64 w(F)h(I)g(X)g(E)g(D)p
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 66 w(S)h(h)g(o)g(r)g(t)g(e)g(s)g(t)p 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
63 w(r)g(e)g(m)g(a)g(i)g(n)g(i)g(n)g(g)p 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
62 w(t)f(i)g(m)g(e)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 65 w(f)g(i)g(r)g(s)g(t)p
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 65 w(*)f(/)p 0 TeXcolorgray 76 3387 V 96
3387 V 0 3357 a Fc(4)p 76 3487 V 96 3487 V 0 3457 a(5)p
0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
245 w Fb(/)g(/)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 64 w(T)h(i)g(m)g(e)p
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 66 w(q)h(u)g(a)g(n)g(t)g(u)g(m)p 0 TeXcolorgray
76 3587 V 96 3587 V 0 3557 a Fc(6)p 0 0.4 0 TeXcolorrgb
299 w Fa(i)f(n)g(t)p 0 TeXcolorgray 0 TeXcolorgray 64
w(q)h(u)g(a)g(n)g(t)g(u)g(m)p 0 TeXcolorgray 59 w(=)62
b(1)6 b(;)p 76 3686 V 96 3686 V 0 3656 a Fc(7)p 76 3786
V 96 3786 V 0 3756 a(8)p 0 TeXcolorgray 299 w Fa(t)h(n)g(o)g(d)g(e)p
0 TeXcolorgray 63 w(*)p 0 TeXcolorgray 63 w(c)g(h)g(o)g(s)g(e)g(n)p
0 TeXcolorgray 65 w(=)p 0 TeXcolorgray 62 w(r)f(e)g(a)g(d)g(y)p
0 TeXcolorgray 15 w(-)j(>)p 0 TeXcolorgray 11 w(f)e(i)g(r)g(s)g(t)p
0 TeXcolorgray 11 w(;)p 0.3 0 0.1 TeXcolorrgb 62 w Fb(/)f(*)p
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 64 w(C)h(h)g(o)g(s)g(e)p 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 66 w(t)g(h)g(e)p
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 63 w(f)g(i)g(r)g(s)g(t)p 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 66 w(r)g(e)g(a)g(d)g
(y)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 67 w(p)h(r)g(o)g(c)g(e)g(s)g(s)p
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 60 w(i)e(n)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
76 3885 V 96 3885 V 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
507 3856 a(r)h(e)g(a)g(d)g(y)p 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 66 w(t)g(l)g(i)g(s)g
(t)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 12 w(*)f(/)p
0 TeXcolorgray 76 3985 V 96 3985 V 0 3955 a Fc(9)p 0
TeXcolorgray 299 w Fa(t)h(n)g(o)g(d)g(e)p 0 TeXcolorgray
63 w(*)p 0 TeXcolorgray 64 w(s)h(m)g(a)g(l)g(l)g(e)g(s)g(t)p
0 TeXcolorgray 59 w(=)p 0 TeXcolorgray 115 w(r)e(e)g(a)g(d)g(y)p
0 TeXcolorgray 15 w(-)j(>)p 0 TeXcolorgray 11 w(f)e(i)g(r)g(s)g(t)p
0 TeXcolorgray 10 w(;)p 0.3 0 0.1 TeXcolorrgb 63 w Fb(/)f(*)p
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 65 w(P)i(r)g(o)g(c)g(e)g(s)g(s)p 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
61 w(w)f(i)g(t)g(h)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 65 w(t)g(h)g(e)p
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 64 w(s)h(m)g(a)g(l)g(l)g(e)g(s)g(t)p 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 76 4085 V 96 4085 V 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 508 4055 a(e)g(x)g(e)g(c)g(u)g(t)g(i)g(o)g(n)p
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 62 w(t)f(i)g(m)g(e)p 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 11 w(*)f(/)p 0 TeXcolorgray 76 4184 V 96
4184 V -42 4154 a Fc(10)p 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 298 w Fb(/)g(*)p 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 116 w(F)h(i)g(n)g(d)p
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 65 w(p)h(r)g(o)g(c)g(e)g(s)g(s)p 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
62 w(w)f(i)g(t)g(h)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 65 w(m)h(i)g(n)g(i)g(m)g(u)g(m)p
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 63 w(r)g(e)g(m)g(a)g(i)g(n)g(i)g(n)g(g)p
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 62 w(t)f(i)g(m)g(e)p 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 63 w(a)f(t)p
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 64 w(e)h(v)g(e)g(r)g(y)p 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 66 w(s)g(i)g(n)g(g)g
(l)g(e)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 67 w(t)g(i)g(m)g(e)p 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 76 4284 V 96 4284 V 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 507 4254 a(l)g(a)g(p)p 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
62 w(*)f(/)p 0 TeXcolorgray 76 4384 V 96 4384 V -42 4354
a Fc(11)p 0 0.4 0 TeXcolorrgb 299 w Fa(w)h(h)g(i)g(l)g(e)p
0 TeXcolorgray 10 w(\()p 0 TeXcolorgray 12 w(c)g(h)g(o)g(s)g(e)g(n)p
0 TeXcolorgray 66 w(!)f(=)p 0 TeXcolorgray 64 w(N)h(U)g(L)g(L)p
0 TeXcolorgray 9 w(\))p 76 4483 V 96 4483 V -42 4453
a Fc(12)296 b Fa({)p 76 4583 V 96 4583 V -42 4553 a Fc(13)p
0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
507 w Fb(/)6 b(*)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 65 w(S)i(e)g(l)g(e)g(c)g(t)g(s)p
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 61 w(f)f(o)g(r)p 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 65 w(e)h(x)g(e)g(c)g
(u)g(t)g(i)g(o)g(n)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 62 w(t)f(h)g(e)p
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 64 w(w)h(a)g(i)g(t)g(i)g(n)g(g)p 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
62 w(p)g(r)g(o)g(c)g(e)g(s)g(s)p 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 62 w(w)f(i)g(t)g(h)p
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 64 w(t)g(h)g(e)p 0 TeXcolorgray 0.3 0 0.1
TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 64 w(s)h(m)g(a)g(l)g
(l)g(e)g(s)g(t)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
76 4682 V 96 4682 V 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
717 4653 a(e)g(x)g(e)g(c)g(u)g(t)g(i)g(o)g(n)p 0 TeXcolorgray
0.3 0 0.1 TeXcolorrgb 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
62 w(t)f(i)g(m)g(e)p 0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb
0 TeXcolorgray 0.3 0 0.1 TeXcolorrgb 64 w(*)f(/)p 0 TeXcolorgray
76 4782 V 96 4782 V -42 4752 a Fc(14)p 0 0.4 0 TeXcolorrgb
925 w Fa(i)g(f)p 0 TeXcolorgray 11 w(\()g(\()p 0 TeXcolorgray
12 w(c)h(h)g(o)g(s)g(e)g(n)p 0 TeXcolorgray 11 w(-)i(>)p
0 TeXcolorgray 10 w(p)d(r)g(o)g(c)p 0 TeXcolorgray 13
w(-)j(>)p 0 TeXcolorgray 12 w(r)f(e)g(m)g(a)g(i)g(n)g(i)g(n)g(g)p
0 TeXcolorgray 7 w(\))62 b(<)d(\()p 0 TeXcolorgray 11
w(s)7 b(m)g(a)g(l)g(l)g(e)g(s)g(t)p 0 TeXcolorgray 15
w(-)i(>)p 0 TeXcolorgray 9 w(p)d(r)g(o)g(c)p 0 TeXcolorgray
13 w(-)j(>)p 76 4882 V 96 4882 V 0 TeXcolorgray 1135
4852 a(r)f(e)g(m)g(a)g(i)g(n)g(i)g(n)g(g)p 0 TeXcolorgray
7 w(\))h(\))p 76 4981 V 96 4981 V -42 4951 a Fc(15)505
b Fa({)p 76 5081 V 96 5081 V -42 5051 a Fc(16)p 0 TeXcolorgray
1346 w Fa(s)8 b(m)g(a)g(l)g(l)g(e)g(s)g(t)p 0 TeXcolorgray
59 w(=)p 0 TeXcolorgray 63 w(c)f(h)g(o)g(s)g(e)g(n)p
0 TeXcolorgray 12 w(;)p 76 5181 V 96 5181 V -42 5151
a Fc(17)505 b Fa(})p 0 TeXcolorgray 1929 5400 a Fc(1)p
0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 76 113 4 100 v 96 113 V -42 83 a Fc(18)p
0 TeXcolorgray 926 w Fa(c)7 b(h)g(o)g(s)g(e)g(n)p 0 TeXcolorgray
65 w(=)p 0 TeXcolorgray 63 w(c)g(h)g(o)g(s)g(e)g(n)p
0 TeXcolorgray 12 w(-)i(>)p 0 TeXcolorgray 11 w(n)e(e)g(x)g(t)p
0 TeXcolorgray 9 w(;)p 76 213 V 96 213 V -42 183 a Fc(19)505
b Fa(})p 76 312 V 96 312 V -42 282 a Fc(20)p 76 412 V
96 412 V -42 382 a(21)296 b Fa(*)p 0 TeXcolorgray 11
w(d)7 b(e)g(l)g(t)g(a)p 0 TeXcolorgray 63 w(=)p 0 TeXcolorgray
64 w(q)h(u)g(a)g(n)g(t)g(u)g(m)p 0 TeXcolorgray 7 w(;)p
76 511 V 96 511 V -42 482 a Fc(22)p 76 611 V 96 611 V
-42 581 a(23)p 0 0.4 0 TeXcolorrgb 299 w Fa(r)f(e)g(t)g(u)g(r)g(n)p
0 TeXcolorgray 0 TeXcolorgray 67 w(s)g(m)g(a)g(l)g(l)g(e)g(s)g(t)p
0 TeXcolorgray 14 w(-)i(>)p 0 TeXcolorgray 11 w(p)e(r)g(o)g(c)p
0 TeXcolorgray 9 w(;)p 76 711 V 96 711 V -42 681 a Fc(24)87
b Fa(})p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
1929 5400 a Fc(2)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
