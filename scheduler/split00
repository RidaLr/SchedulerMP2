/* Copyright (c) 2013 Pablo Oliveira <pablo.oliveira@prism.uvsq.fr>.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:

 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.  All rights reserved.
 */

#include <stdlib.h>
#include <stdio.h>
#include <assert.h>
#include <string.h>
#include <time.h>
#include <unistd.h>
#include "sched.h"

/* --Scheduler random--*/
tproc * randomscheduler(tlist * procs, tlist * ready, int * delta) {
    int length = len(ready);
    int selected = rand()%length;
    tnode * p = ready->first;
    for (int i=0; i < selected; i++) {
        p = p->next;
    }
    *delta = rand()%p->proc->remaining + 1;
    return p->proc;
}
/* --Scheduler random--*/

/* --Scheduler fcfs-- */
tproc * fcfs(tlist * procs, tlist * ready, int * delta) {
    /* FIXED : first come first served */
    /* Chose the first ready process in ready tlist*/
    tnode* chosen=ready->first;
    *delta = chosen->proc->remaining; // how much time is left
    return chosen->proc;
}
/* --Scheduler fcfs-- */

/* --Scheduler rr-- */
tproc * rr(tlist * procs, tlist * ready, int * delta) {
    /* FIXED : Round-Robin */
    // Time quantum
    int quantum = 1;
    
    tnode * chosen = ready->first; /* Chose the first ready process in ready tlist*/
    tproc * chosenP = chosen->proc;   /* The chosen process*/
    
    del(ready,chosenP); /*  Remove the process chosenP from the list "ready" */
	add(procs,chosenP); /* Add the procces into the end of procs list */
    
    *delta = quantum; 

    return  chosenP;
}
/* --Scheduler rr-- */

/* --Scheduler sjf-- */
tproc * sjf(tlist * procs, tlist * ready, int * delta) {
    /* FIXED Shortest Job First */
    
    tnode * chosen = ready->first; /* Chose the first ready process in ready tlist*/
    tnode * sortestP =  ready->first; /* Process with the smallest execution time*/
    /*  Find process with minimum remaining time at every single time lap */
    while(chosen != NULL)
    {
        /* Selects for execution the waiting process with the shortest execution time */
		if((chosen->proc->remaining) < (sortestP->proc->remaining))
        {
            
		 	sortestP = chosen; /* The process that will be executed*/
        }
		chosen = chosen->next;  /* Chose the next process */
	}

    *delta = sortestP->proc->remaining;      
    
    return sortestP->proc;
}
/* --Scheduler sjf-- */

